main : Bit >< Bit >< Bit >< Bit >< Bit
main = meas5 (cAdd3Mod overflow exIntAcc exIntBB exIntNB)

carry0 : QBit
carry0 = new 1
carry1 : QBit
carry1 = new 1
carry2 : QBit
carry2 = new 1

overflow : QBit
overflow = new 0

exIntA : QBit >< QBit >< QBit >< QBit
exIntA = (carry0, new 0, new 1, new 1)

exIntAcc : QBit >< QBit >< QBit >< QBit >< QBit
exIntAcc = (carry2, carry1, new 0, new 1, new 1)
         
exIntB : QBit >< QBit >< QBit
exIntB = (new 0, new 0, new 1)

exIntBB : !(Bit >< Bit >< Bit)
exIntBB = (1,0,1)

exIntN : QBit >< QBit >< QBit
exIntN = (new 1, new 1, new 0)

exIntNB : !(Bit >< Bit >< Bit)
exIntNB = (1,1,0)

cAdd3Mod : !(QBit -o (QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit))
cAdd3Mod v inA inB inN = let (c2,c1,a2,a1,a0) = ccAdd3 inA inB in
                         let (c21,c11,a21,a11,a01) = ccSub3 (c2,c1,a2,a1,a0) inN in
                         let (a22,v1) = CNOT (a21,v) in
                         ccAdd3 (c21,v1,a22,a11,a01) inN

ccAdd3 : !((QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit))
ccAdd3 inA inB = let (c2,c1,apre2,apre1,apre0) = inA in  
                let (a2,a1,a0) = swap3 (QFT3 (apre2,apre1,apre0)) in 
                let (b2,b1,b0) = inB in    
                let (c21,c11,a21) = if b2 then CCR1 (c2,c1,a2) else (c2,c1,a2)   in
                let (c22,c12,a22) = if b1 then CCR2 (c21,c11,a21) else (c21,c11,a21) in
                let (c23,c13,a23) = if b0 then CCR4 (c22,c12,a22) else (c22,c12,a22) in
                let (c24,c14,a11) = if b1 then CCR1 (c23,c13,a1)  else (c23,c13,a1)  in
                let (c25,c15,a12) = if b0 then CCR2 (c24,c14,a11) else (c24,c14,a11) in
                let (c26,c16,a01) = if b0 then CCR1 (c25,c15,a0)  else (c25,c15,a0)  in
                let (apost2,apost1,apost0) = QFTI3 (swap3 (a23,a12,a01)) in
                (c26,c16,apost2,apost1,apost0)

ccSub3 : !((QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit))
ccSub3 inA inB = let (c2,c1,apre2,apre1,apre0) = inA in  
                let (a2,a1,a0) = swap3 (QFT3 (apre2,apre1,apre0)) in 
                let (b2,b1,b0) = inB in    
                let (c21,c11,a21) = if b2 then CCRI1 (c2,c1,a2) else (c2,c1,a2)   in
                let (c22,c12,a22) = if b1 then CCRI2 (c21,c11,a21) else (c21,c11,a21) in
                let (c23,c13,a23) = if b0 then CCRI4 (c22,c12,a22) else (c22,c12,a22) in
                let (c24,c14,a11) = if b1 then CCRI1 (c23,c13,a1)  else (c23,c13,a1)  in
                let (c25,c15,a12) = if b0 then CCRI2 (c24,c14,a11) else (c24,c14,a11) in
                let (c26,c16,a01) = if b0 then CCRI1 (c25,c15,a0)  else (c25,c15,a0)  in
                let (apost2,apost1,apost0) = QFTI3 (swap3 (a23,a12,a01)) in
                (c26,c16,apost2,apost1,apost0)

cAdd3 : !((QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit))
cAdd3 inA inB = let (c,apre2,apre1,apre0) = inA in  
                let (a2,a1,a0) = swap3 (QFT3 (apre2,apre1,apre0)) in 
                let (b2,b1,b0) = inB in    
                let (c1,a21) = if b2 then CR1 (c,a2)   else (c,a2)   in
                let (c2,a22) = if b1 then CR2 (c1,a21) else (c1,a21) in
                let (c3,a23) = if b0 then CR4 (c2,a22) else (c2,a22) in
                let (c4,a11) = if b1 then CR1 (c3,a1)  else (c3,a1)  in
                let (c5,a12) = if b0 then CR2 (c4,a11) else (c4,a11) in
                let (c6,a01) = if b0 then CR1 (c5,a0)  else (c5,a0)  in
                let (apost2,apost1,apost0) = QFTI3 (swap3 (a23,a12,a01)) in
                (c6,apost2,apost1,apost0)

cSub3 : !((QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit))
cSub3 inA inB = let (c,apre2,apre1,apre0) = inA in  
                let (a2,a1,a0) = swap3 (QFT3 (apre2,apre1,apre0)) in 
                let (b2,b1,b0) = inB in      
                let (c1,a21) = if b2  then CRI1 (c,a2) else (c,a2) in
                let (c2,a22) = if b1  then CRI2 (c1,a21) else (c1,a21) in
                let (c3,a23) = if b0  then CRI4 (c2,a22) else (c2,a22) in
                let (c4,a11) = if b1  then CRI1 (c3,a1) else (c3,a1) in
                let (c5,a12) = if b0  then CRI2 (c4,a11) else (c4,a11) in
                let (c6,a01) = if b0  then CRI1 (c5,a0)  else (c5,a0) in
                let (apost2,apost1,apost0) = QFTI3 (swap3 (a23,a12,a01)) in
                (c6,apost2,apost1,apost0)


cSub3Q : !((QBit >< QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit))
cSub3Q inA inB = let (c,apre2,apre1,apre0) = inA in  
                let (a2,a1,a0) = swap3 (QFT3 (apre2,apre1,apre0)) in 
                let (b2,b1,b0) = inB in      
                let (b21,a21) = CRI1 (b2,a2) in
                let (b11,a22) = CRI2 (b1,a21) in
                let (b01,a23) = CRI4 (b0,a22) in
                let (b12,a11) = CRI1 (b11,a1) in
                let (b02,a12) = CRI2 (b01,a11) in
                let (b03,a01) = CRI1 (b02,a0) in
                let (apost2,apost1,apost0) = QFTI3 (swap3 (a23,a12,a01)) in
                (c,apost2,apost1,apost0)

ccSub3Q : !((QBit >< QBit >< QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit >< QBit))
ccSub3Q inA inB = let (c,x,apre2,apre1,apre0) = inA in  
                let (a2,a1,a0) = swap3 (QFT3 (apre2,apre1,apre0)) in 
                let (b2,b1,b0) = inB in      
                let (c1,b21,a21) = CCRI1 (c,b2,a2) in
                let (c2,b11,a22) = CCRI2 (c1,b1,a21) in
                let (c3,b01,a23) = CCRI4 (c2,b0,a22) in
                let (c4,b12,a11) = CCRI1 (c3,b11,a1) in
                let (c5,b02,a12) = CCRI2 (c4,b01,a11) in
                let (c6,b03,a01) = CCRI1 (c5,b02,a0) in
                let (apost2,apost1,apost0) = QFTI3 (swap3 (a23,a12,a01)) in
                (c6,x,apost2,apost1,apost0)

ccAdd3Q : !((QBit >< QBit >< QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit >< QBit))
ccAdd3Q inA inB = let (c,x,apre2,apre1,apre0) = inA in  
                let (a2,a1,a0) = swap3 (QFT3 (apre2,apre1,apre0)) in 
                let (b2,b1,b0) = inB in      
                let (x1,b21,a21) = CCR1 (x,b2,a2) in
                let (x2,b11,a22) = CCR2 (x1,b1,a21) in
                let (x3,b01,a23) = CCR4 (x2,b0,a22) in
                let (x4,b12,a11) = CCR1 (x3,b11,a1) in
                let (x5,b02,a12) = CCR2 (x4,b01,a11) in
                let (x6,b03,a01) = CCR1 (x5,b02,a0) in
                let (apost2,apost1,apost0) = QFTI3 (swap3 (a23,a12,a01)) in
                (c,x6,apost2,apost1,apost0)

swap3 : !((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit))
swap3 q = let (a2,a1,a0) = q in
           let (a21,a01) = SWAP (a2,a0) in
           (a21,a1,a01)

swap4 : !((QBit >< QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit))
swap4 q = let (c,a2,a1,a0) = q in
           let (a21,a01) = SWAP (a2,a0) in
           (c,a21,a1,a01)

meas3 : (QBit >< QBit >< QBit) -o (Bit >< Bit >< Bit)
meas3 q = let (a,b,c) = q in (meas a,meas b,meas c)
meas4 : (QBit >< QBit >< QBit >< QBit) -o (Bit >< Bit >< Bit >< Bit)
meas4 q = let (a,b,c,d) = q in (meas a,meas b,meas c,meas d)
meas5 : (QBit >< QBit >< QBit >< QBit >< QBit) -o (Bit >< Bit >< Bit >< Bit >< Bit)
meas5 q = let (a,b,c,d,e) = q in (meas a,meas b,meas c,meas d,meas e)