intA : QBit >< QBit >< QBit >< QBit >< QBit >< QBit
intA = (new 0, H (new 1), new 0, new 0, new 0, new 0)

intB : !(Bit >< Bit >< Bit)
intB = (0,1,1)

intBI : !(Bit >< Bit >< Bit)
intBI = (0,0,1)

intN : !(Bit >< Bit >< Bit)
intN = (1,0,0)

intX : QBit >< QBit >< QBit
intX = (new 1, new 1, new 1)

main : (Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit)
main = let (v,c,x2,x1,x0,a3,a2,a1,a0,m5,m4,m3,m2,m1,m0) = orderfind intA intB intN intX in
       let (v,x2,x1,x0,a3,a2,a1,a0) = (meas v, meas x2, meas x1, meas x0, meas a3, meas a2, meas a1, meas a0) in
       (v,c,x2,x1,x0,a3,a2,a1,a0,m5,m4,m3,m2,m1,m0)

orderfind : (QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
         -o !(Bit >< Bit  >< Bit) 
         -o !(Bit >< Bit  >< Bit) 
         -o (QBit >< QBit >< QBit) 
         -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< !(Bit >< Bit >< Bit >< Bit >< Bit >< Bit))
orderfind inA inB inN inX = 
            let (x2,x1,x0,v,c,a3,a2,a1,a0) = cUa inA inB inN inX in
            let (v,m0) = (v, meas (H c)) in
            let (v,c)  = (v, H (new 0)) in
            
            let (x2,x1,x0,v,c,a3,a2,a1,a0) = cUa (v,c,a3,a2,a1,a0) inB inN (x2,x1,x0) in
            let (v,m1) = (v, meas (cR Z m0 c)) in
            let (v,c)  = (v, H (new 0)) in

            let (x2,x1,x0,v,c,a3,a2,a1,a0) = cUa (v,c,a3,a2,a1,a0) inB inN (x2,x1,x0) in
            let (v,m2) = (v, meas (cR1 Z (m0,m1) c)) in
            let (v,c)  = (v, H (new 0)) in

            let (x2,x1,x0,v,c,a3,a2,a1,a0) = cUa (v,c,a3,a2,a1,a0) inB inN (x2,x1,x0) in
            let (v,m3) = (v, meas (cR2 Z (m0,m1,m2) c)) in
            let (v,c)  = (v, H (new 0)) in
            
            let (x2,x1,x0,v,c,a3,a2,a1,a0) = cUa (v,c,a3,a2,a1,a0) inB inN (x2,x1,x0) in
            let (v,m4) = (v, meas (cR3 Z (m0,m1,m2,m3) c)) in
            let (v,c)  = (v, H (new 0)) in

            let (x2,x1,x0,v,c,a3,a2,a1,a0) = cUa (v,c,a3,a2,a1,a0) inB inN (x2,x1,x0) in
            let (v,m5) = (v, meas (cR4 Z (m0,m1,m2,m3,m4) c)) in
            let (v,c)  = (v, new 0) in
            (v,c, x2,x1,x0, a3,a2,a1,a0, m4,m5,m3,m2,m1,m0)

cUa : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
     -o !(Bit >< Bit  >< Bit) 
     -o !(Bit >< Bit  >< Bit) 
     -o (QBit >< QBit >< QBit) 
     -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cUa inA inB inN inX = let (x2,x1,x0,v,c,a3,a2,a1,a0) = cMul3Mod inA inB inN inX in
                      let (c,x2,x1,x0,a3,a2,a1,a0)   = cSwap c (a3,a2,a1,a0) (x2,x1,x0) in
                      cMul3ModI (v,c,a3,a2,a1,a0) inB inN (x2,x1,x0)

cMul3Mod : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
          -o !(Bit >< Bit  >< Bit) 
          -o !(Bit >< Bit  >< Bit) 
          -o (QBit >< QBit >< QBit) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cMul3Mod inA inB inN inX = let (v,c,a3,a2,a1,a0)           = inA in
                           let (x2,x1,x0)                  = inX in
                           let (x01,v1,c1,a31,a21,a11,a01) = cAdd3Mod (x0,v,c,a3,a2,a1,a0) inB inN in
                           let (v2,c2)                     = (meas v1,c1) in
                           let (b2,b1,b0)                  = sll inB in
                           let (x11,v3,c3,a32,a22,a12,a02) = cAdd3Mod (x1,new 0,c2,a31,a21,a11,a01) (b2,b1,b0) inN in
                           let (v4,c4)                     = (meas v3,c3) in
                           let (b21,b11,b01)               = sll (b2,b1,b0) in
                           let (x21,v5,c5,a33,a23,a13,a03) = cAdd3Mod (x2,new 0,c4,a32,a22,a12,a02) (b21,b11,b01) inN in
                           (x21,x11,x01,v5,c5,a33,a23,a13,a03)

cMul3ModI : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
           -o !(Bit >< Bit  >< Bit) 
           -o !(Bit >< Bit  >< Bit) 
           -o (QBit >< QBit >< QBit) 
           -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cMul3ModI inA inB inN inX = let (v,c,a3,a2,a1,a0)           = inA in
                            let (x2,x1,x0)                  = inX in
                            let (x01,v1,c1,a31,a21,a11,a01) = cSub3Mod (x0,v,c,a3,a2,a1,a0) inB inN in
                            let (v2,c2)                     = (meas v1,c1) in
                            let (b2,b1,b0)                  = sll inB in
                            let (x11,v3,c3,a32,a22,a12,a02) = cSub3Mod (x1,new 0,c2,a31,a21,a11,a01) (b2,b1,b0) inN in
                            let (v4,c4)                     = (meas v3,c3) in
                            let (b21,b11,b01)               = sll (b2,b1,b0) in
                            let (x21,v5,c5,a33,a23,a13,a03) = cSub3Mod (x2,new 0,c4,a32,a22,a12,a02) (b21,b11,b01) inN in
                            (x21,x11,x01,v5,c5,a33,a23,a13,a03)

cAdd3Mod : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
          -o !(Bit >< Bit  >< Bit) 
          -o !(Bit >< Bit  >< Bit) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cAdd3Mod inA inB inN = let (x,v,c,a3,a2,a1,a0)            = inA in
                       let (a30,a20,a10,a00)              = QFT4      (a3,a2,a1,a0) in
                       let (x1,v1,c1,a31,a21,a11,a01)     = addBsubN  (x,v,c,a30,a20,a10,a00) inB inN in
                       let (a310,a210,a110,a010)          = QFTI4     (a31,a21,a11,a01) in
                       let (a311,v3)                      = CNOT      (a310,v1) in
                       let (v4,c2)                        = SWAP      (v3,c1) in
                       let (a322,a221,a121,a021)          = QFT4      (a311,a210,a110,a010) in
                       let (x2,v5,c3,a33,a23,a13,a03)     = cAdd      (x1,v4,c2,a322,a221,a121,a021) inN in
                       let (v6,c4)                        = SWAP      (v5,c3) in
                       restoreAnc (x2,v6,c4,a33,a23,a13,a03) inB

cSub3Mod : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
          -o !(Bit >< Bit  >< Bit) 
          -o !(Bit >< Bit  >< Bit) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cSub3Mod inA inB inN = let (x,v,c,a3,a2,a1,a0)            = inA in
                       let (a30,a20,a10,a00)              = QFT4      (a3,a2,a1,a0) in
                       let (x1,v1,c1,a31,a21,a11,a01)     = subBaddN  (x,v,c,a30,a20,a10,a00) inB inN in
                       let (a310,a210,a110,a010)          = QFTI4     (a31,a21,a11,a01) in
                       let (a311,v3)                      = CNOT      (a310,v1) in
                       let (v4,c2)                        = SWAP      (v3,c1) in
                       let (a322,a221,a121,a021)          = QFT4      (a311,a210,a110,a010) in
                       let (x2,v5,c3,a33,a23,a13,a03)     = cAdd      (x1,v4,c2,a322,a221,a121,a021) inN in
                       let (v6,c4)                        = SWAP      (v5,c3) in
                       restoreAnc (x2,v6,c4,a33,a23,a13,a03) inB

restoreAnc : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
            -o !(Bit >< Bit  >< Bit) 
            -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
restoreAnc inA inB =   let (x3,v8,c5,a34,a24,a14,a04)     = ccSub     inA inB in
                       let (a340,a240,a140,a040)          = QFTI4     (a34,a24,a14,a04) in
                       let (a341,v9)                      = CNOT      (X a340, v8) in
                       let (a342,v10)                     =           (X a341,v9) in
                       let (a343,a241,a141,a041)          = QFT4      (a342,a240,a140,a040) in
                       let (x4,v11,c5,a35,a25,a15,a05)    = ccAdd     (x3,v10,c5,a343,a241,a141,a041) inB in
                       let (a350,a250,a150,a050)          = QFTI4     (a35,a25,a15,a05) in
                       (x4,v11,c5,a350,a250,a150,a050)

subBaddN : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
          -o !(Bit >< Bit  >< Bit) 
          -o !(Bit >< Bit  >< Bit) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
subBaddN q b n = cAdd (ccSub q b) n

addBsubN : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
          -o !(Bit >< Bit  >< Bit) 
          -o !(Bit >< Bit  >< Bit) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
addBsubN q b n = cSub (ccAdd q b) n

ccAdd : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
       -o !(Bit >< Bit  >< Bit) 
       -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
ccAdd q b = ccAdd3 (CCR4, CCR2, CCR1) q b

cAdd : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
      -o !(Bit >< Bit  >< Bit) 
      -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cAdd q b = cAdd3 (CR4, CR2, CR1) q b

ccSub : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
       -o !(Bit >< Bit  >< Bit) 
       -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
ccSub q b = ccAdd3 (CCRI4, CCRI2, CCRI1) q b

cSub : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
      -o !(Bit >< Bit  >< Bit) 
      -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cSub q b = cAdd3 (CRI4, CRI2, CRI1) q ( b)

ccAdd3 : !((!((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit))
         >< !((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit)) 
         >< !((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit))) 
           -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
           -o !(Bit >< Bit  >< Bit) 
           -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
ccAdd3 g inA inB = let (x,v,c1,a3,a2,a1,a0) = inA in  
                let (g2,g1,g0) = g in
                let (b2,b1,b0) = inB in    
                let (x1,c11,a21) = if b0 then g0 (x,c1,a2) else (x,c1,a2)   in
                let (x2,c12,a11) = if b1 then g0 (x1,c11,a1) else (x1,c11,a1) in
                let (x3,c13,a12) = if b0 then g1 (x2,c12,a11) else (x2,c12,a11) in
                let (x4,c14,a01) = if b2 then g0 (x3,c13,a0)  else (x3,c13,a0)  in
                let (x5,c15,a02) = if b1 then g1 (x4,c14,a01) else (x4,c14,a01) in
                let (x6,c16,a03) = if b0 then g2 (x5,c15,a02)  else (x5,c15,a02)  in
                (x6,v,c16,a3,a21,a12,a03)

cAdd3 : !((!((QBit >< QBit) -o (QBit >< QBit)) >< !((QBit >< QBit) -o (QBit >< QBit)) >< !((QBit >< QBit) -o (QBit >< QBit))) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
          -o !(Bit >< Bit  >< Bit) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cAdd3 g inA inB = let (x,v,c,a3,a2,a1,a0) = inA in  
                let (g2,g1,g0) = g in
                let (b2,b1,b0) = inB in    
                let (c1,a21) = if b0 then g0 (c,a2)   else (c,a2)   in
                let (c2,a11) = if b1 then g0 (c1,a1) else (c1,a1) in
                let (c3,a12) = if b0 then g1 (c2,a11) else (c2,a11) in
                let (c4,a01) = if b2 then g0 (c3,a0)  else (c3,a0)  in
                let (c5,a02) = if b1 then g1 (c4,a01) else (c4,a01) in
                let (c6,a03) = if b0 then g2 (c5,a02)  else (c5,a02)  in
                (x,v,c6,a3,a21,a12,a03)

cSwap : !(QBit 
    -o (QBit >< QBit >< QBit >< QBit) 
    -o (QBit >< QBit >< QBit) 
    -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cSwap c inA inX = let (a3,a2,a1,a0) = inA in
                     let (x2,x1,x0) = inX in
                     let (c1,a31,x21)  = FREDKIN (c,a3,x2) in
                     let (c2,a21,x11)  = FREDKIN (c1,a2,x1) in
                     let (c3,a11,x01)  = FREDKIN (c2,a1,x0) in
                     (c3,x21,x11,x01,a31,a21,a11,a0)

cR : !((QBit -o QBit) -o !Bit -o QBit -o QBit)
cR g b q = if b then g q else q
cR1 : !((QBit -o QBit) -o !(Bit >< Bit) -o QBit -o QBit)
cR1 g b q = let (b1,b0) = b in if b0 then (if b1 then g q else q) else q
cR2 : !((QBit -o QBit) -o !(Bit >< Bit >< Bit) -o QBit -o QBit)
cR2 g b q = let (b2,b1,b0) = b in if b2 then (if b1 then (if b0 then g q else q) else q) else q
cR3 : !((QBit -o QBit) -o !(Bit >< Bit >< Bit >< Bit) -o QBit -o QBit)
cR3 g b q = let (b3,b2,b1,b0) = b in if b3 then (if b2 then (if b1 then (if b0 then g q else q) else q) else q) else q
cR4 : !((QBit -o QBit) -o !(Bit >< Bit >< Bit >< Bit >< Bit) -o QBit -o QBit)
cR4 g b q = let (b4,b3,b2,b1,b0) = b in if b4 then (if b3 then (if b2 then (if b1 then (if b0 then g q else q) else q) else q) else q) else q


sll : !(!(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit))
sll b = let (b2,b1,b0) = b in (b1,b0,0)