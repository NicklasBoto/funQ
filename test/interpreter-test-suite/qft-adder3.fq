carry0 : QBit
carry0 = new 1
carry1 : QBit
carry1 = new 1
carry2 : QBit
carry2 = new 1
overflow : QBit
overflow = new 0

intA : QBit >< QBit >< QBit >< QBit >< QBit >< QBit
intA = (overflow, carry1, new 0, new 1, new 0, new 0)


intAadd :  QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit
intAadd = (new 1,  new 0,  new 1,  new 0,  new 0,  new 0,  new 0)

-- cAdd3Mod funkar inte då n-b < 
intB : !(Bit >< Bit >< Bit)
intB = (0,0,1)

intBI : !(Bit >< Bit >< Bit)
intBI = (1,0,0)

intN : !(Bit >< Bit >< Bit)
intN = (1,0,0)

intX : QBit >< QBit >< QBit
intX = (new 1, new 1, new 1)

sll : !(!(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit))
sll b = let (b2,b1,b0) = b in (b1,b0,0)

main : (Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit)
main = meas7 (cMul3Mod intA intB intN intX)

-- cMul3ModI : (QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit)
-- cMul3ModI inA inB inN inX = let (v,c,a2,a1,a0)         = inA in
--                             let (x2,x1,x0)              = inX in
--                             let (x01,v1,c1,a21,a11,a01) = cAdd3Mod (x0,v,c,a2,a1,a0) inB inN in
--                             let (v2,c2)                 = (meas v1,c1) in
--                             let (b2,b1,b0)              = sll inB in
--                             let (x11,v3,c3,a22,a12,a02) = cAdd3Mod (x1,new 0,c2,a21,a11,a01) (b2,b1,b0) inN in
--                             let (v4,c4)                 = (meas v3,c3) in
--                             let (b21,b11,b01)           = sll (b2,b1,b0) in
--                             let (x21,v5,c5,a23,a13,a03) = cAdd3Mod (x2,new 0,c4,a22,a12,a02) (b21,b11,b01) inN in
--                             (x21,v5,c5,a23,a13,a03)

cMul3Mod : (QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit)
cMul3Mod inA inB inN inX = let (v,c,a3,a2,a1,a0)          = inA in
                           let (x2,x1,x0)              = inX in
                           let (x01,v1,c1,a31,a21,a11,a01) = cAdd3Mod (x0,v,c,a3,a2,a1,a0) inB inN in
                           let (v2,c2)                 = (meas v1,c1) in
                           let (b2,b1,b0)              = sll inB in
                           let (x11,v3,c3,a32,a22,a12,a02) = cAdd3Mod (x1,new 0,c2,a31,a21,a11,a01) (b2,b1,b0) inN in
                           let (v4,c4)                 = (meas v3,c3) in
                           let (b21,b11,b01)           = sll (b2,b1,b0) in
                           let (x21,v5,c5,a33,a23,a13,a03) = cAdd3Mod (x2,new 0,c4,a32,a22,a12,a02) (b21,b11,b01) inN in
                           (x21,v5,c5,a33,a23,a13,a03)


cAdd3Mod : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cAdd3Mod inA inB inN = let (x,v,c,a3,a2,a1,a0)            = inA in
                       let (a30,a20,a10,a00)              = QFT4      (a3,a2,a1,a0) in
                       let (x1,v1,c1,a31,a21,a11,a01)     = addBsubN  (x,v,c,a30,a20,a10,a00) inB inN in
                       let (a310,a210,a110,a010)          = QFTI4     (a31,a21,a11,a01) in
                       let (a311,v3)                      = CNOT      (a310,v1) in
                       let (v4,c2)                        = SWAP      (v3,c1) in
                       let (a322,a221,a121,a021)          = QFT4      (a311,a210,a110,a010) in
                       let (x2,v5,c3,a33,a23,a13,a03)     = cAdd      (x1,v4,c2,a322,a221,a121,a021) inN in
                       let (v6,c4)                        = SWAP      (v5,c3) in
                       restoreAnc (x2,v6,c4,a33,a23,a13,a03) inB

cSub3Mod : (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit)
cSub3Mod inA inB inN = let (x,v,c,a3,a2,a1,a0)            = inA in
                       let (a30,a20,a10,a00)              = QFT4      (a3,a2,a1,a0) in
                       let (x1,v1,c1,a31,a21,a11,a01)     = subBaddN  (x,v,c,a30,a20,a10,a00) inB inN in
                       let (a310,a210,a110,a010)          = QFTI4     (a31,a21,a11,a01) in
                       let (a311,v3)                      = CNOT      (a310,v1) in
                       let (v4,c2)                        = SWAP      (v3,c1) in
                       let (a322,a221,a121,a021)          = QFT4      (a311,a210,a110,a010) in
                       let (x2,v5,c3,a33,a23,a13,a03)     = cAdd      (x1,v4,c2,a322,a221,a121,a021) inN in
                       let (v6,c4)                        = SWAP      (v5,c3) in
                       restoreAnc (x2,v6,c4,a33,a23,a13,a03) inB
                      

      
restoreAnc : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
restoreAnc inA inB =   let (x3,v8,c5,a34,a24,a14,a04)     = ccSub     inA inB in
                       let (a340,a240,a140,a040)          = QFTI4     (a34,a24,a14,a04) in
                       let (a341,v9)                      = CNOT      (X a340, v8) in
                       let (a342,v10)                     =           (X a341,v9) in
                       let (a343,a241,a141,a041)          = QFT4      (a342,a240,a140,a040) in
                       let (x4,v11,c5,a35,a25,a15,a05)    = ccAdd     (x3,v10,c5,a343,a241,a141,a041) inB in
                       let (a350,a250,a150,a050)          = QFTI4     (a35,a25,a15,a05) in
                       (x4,v11,c5,a350,a250,a150,a050)

reverseIfZero : (QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< !(Bit >< Bit >< Bit))
reverseIfZero q n = let (a2,a1,a0)       = not3q q in
                  let (t4,t3,t2,t1,t0) = toff4 (new 0, a2, new 0, a1, a0) in
                  let (t4b,t2b)          = meas2 (t4,t2) in
                  if t4b then 
                    let (n2,n1,n0) = reverse n in (X t3,X t1,X t0,n2,n1,n0) 
                    else let (n2,n1,n0) = n in (X t3,X t1,X t0,n2,n1,n0)

reverse : !(!(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit))
reverse b = let (b2,b1,b0) = b in (b0,b1,b2)

toff4 : !((QBit >< QBit >< QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit >< QBit))
toff4 q = let (a4,a3,a2,a1,a0) = q in
          let (a01,a11,a21)    = TOFFOLI (a0,a1,a2) in
          let (a22,a31,a41)    = TOFFOLI (a21,a3,a4) in
          (a41,a31,a22,a11,a01)

not3b : !(!(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit))
not3b q = let (a,b,c) = q in 
          let (a1,b1) = (if a then 0 else a, if b then 0 else b) in
          let (b2,c1) = (b1, if c then 0 else c) in
          (a1,b2,c1)
not3q : !((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit))
not3q q = let (a,b,c) = q in (X a, X b, X c)

subBaddN : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
subBaddN q b n = cAdd (cSub q b) n
addBsubN : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
addBsubN q b n = cSub (cAdd q b) n

qft4 : !((QBit >< QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit))
qft4 q = swap4 (QFT4 (q))

qfti4 : !((QBit >< QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit))
qfti4 q =  (QFTI4 (swap4 q))

ccAdd : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
ccAdd q b = ccAdd3 (CCR4, CCR2, CCR1) q b

cAdd : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cAdd q b = cAdd3 (CR4, CR2, CR1) q b

ccSub : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
ccSub q b = ccAdd3 (CCRI4, CCRI2, CCRI1) q b

cSub : !((QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o !(Bit >< Bit >< Bit) -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cSub q b = cAdd3 (CRI4, CRI2, CRI1) q ( b)

ccAdd3 : !((!((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit)) >< !((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit)) >< !((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit))) 
           -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
           -o !(Bit >< Bit >< Bit) 
           -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
ccAdd3 g inA inB = let (x,v,c1,a3,a2,a1,a0) = inA in  
                let (g2,g1,g0) = g in
                let (b2,b1,b0) = inB in    
                let (x1,c11,a21) = if b0 then g0 (x,c1,a2) else (x,c1,a2)   in
                let (x2,c12,a11) = if b1 then g0 (x1,c11,a1) else (x1,c11,a1) in
                let (x3,c13,a12) = if b0 then g1 (x2,c12,a11) else (x2,c12,a11) in
                let (x4,c14,a01) = if b2 then g0 (x3,c13,a0)  else (x3,c13,a0)  in
                let (x5,c15,a02) = if b1 then g1 (x4,c14,a01) else (x4,c14,a01) in
                let (x6,c16,a03) = if b0 then g2 (x5,c15,a02)  else (x5,c15,a02)  in
                (x6,v,c16,a3,a21,a12,a03)

cAdd3 : !((!((QBit >< QBit) -o (QBit >< QBit)) >< !((QBit >< QBit) -o (QBit >< QBit)) >< !((QBit >< QBit) -o (QBit >< QBit))) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) 
          -o !(Bit >< Bit >< Bit) 
          -o (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit))
cAdd3 g inA inB = let (x,v,c,a3,a2,a1,a0) = inA in  
                let (g2,g1,g0) = g in
                let (b2,b1,b0) = inB in    
                let (c1,a21) = if b0 then g0 (c,a2)   else (c,a2)   in
                let (c2,a11) = if b1 then g0 (c1,a1) else (c1,a1) in
                let (c3,a12) = if b0 then g1 (c2,a11) else (c2,a11) in
                let (c4,a01) = if b2 then g0 (c3,a0)  else (c3,a0)  in
                let (c5,a02) = if b1 then g1 (c4,a01) else (c4,a01) in
                let (c6,a03) = if b0 then g2 (c5,a02)  else (c5,a02)  in
                (x,v,c6,a3,a21,a12,a03)





swap3 : !((QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit))
swap3 q = let (a2,a1,a0) = q in
           let (a21,a01) = SWAP (a2,a0) in
           (a21,a1,a01)

swap4 : !((QBit >< QBit >< QBit >< QBit) -o (QBit >< QBit >< QBit >< QBit))
swap4 q = let (a3,a2,a1,a0) = q in
          let (a21,a11) = SWAP (a2,a1) in
          let (a31,a01)   = SWAP (a3,a0) in
          (a31,a21,a11,a01)

meas2 : (QBit >< QBit) -o (Bit >< Bit)
meas2 q = let (a,b) = q in (meas a,meas b)
meas3 : (QBit >< QBit >< QBit) -o (Bit >< Bit >< Bit)
meas3 q = let (a,b,c) = q in (meas a,meas b,meas c)
meas4 : (QBit >< QBit >< QBit >< QBit) -o (Bit >< Bit >< Bit >< Bit)
meas4 q = let (a,b,c,d) = q in (meas a,meas b,meas c,meas d)
meas5 : (QBit >< QBit >< QBit >< QBit >< QBit) -o (Bit >< Bit >< Bit >< Bit >< Bit)
meas5 q = let (a,b,c,d,e) = q in (meas a,meas b,meas c,meas d,meas e)
meas6 : (QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o (Bit >< Bit >< Bit >< Bit >< Bit >< Bit)
meas6 q = let (a,b,c,d,e,f) = q in (meas a,meas b,meas c,meas d,meas e,meas f)
meas7 : (QBit >< QBit >< QBit >< QBit >< QBit >< QBit >< QBit) -o (Bit >< Bit >< Bit >< Bit >< Bit >< Bit >< Bit)
meas7 q = let (a,b,c,d,e,f,g) = q in (meas a,meas b,meas c,meas d,meas e,meas f,meas g)