main : Bit 
main = measureFst (multiple (new 1, new 1)) -- 0 

comp : ((QBit >< QBit) -o (QBit >< QBit)) -o ((QBit >< QBit) -o (QBit >< QBit)) -o ((QBit >< QBit) -o (QBit >< QBit))
comp f g = \x: QBit >< QBit . f (g x)

multiple : (QBit >< QBit) -o (QBit >< QBit)
multiple = comp SWAP CNOT

measureFst : (QBit >< QBit) -o Bit
measureFst q = let (a,b) = q in meas a 

measureSnd : (QBit >< QBit) -o Bit
measureSnd q = let (a,b) = q in meas b