plus : Bit -o Bit -o !Bit
plus x y = if x 
    then (if y then 0 else 1)
    else (if y then 1 else 0)

q : QBit
q = (\x . x) (new 0)

not : Bit -o !Bit
not x = if x then x else x

testqnot : QBit
testqnot = qnot (new 0)

fst : !(T >< T)
fst = (*,*)

idq : QBit -o !QBit
idq x = x


snd : (T >< Bit) -o T
snd x = let (a,b) = x in a

gen : (Bit >< Bit)
gen = (0, 0)

b : Bit
b = 0        

qq : QBit
qq = new 0

clone : (Bit >< Bit) -o ((Bit >< Bit) >< (Bit >< Bit))
clone a = (a,a)

cloneF : (Bit >< Bit) >< (Bit >< Bit)
cloneF = clone gen

idt : !(Bit >< Bit >< Bit) -o !(Bit >< Bit >< Bit)
idt m = let (a,b) = m in let (b,c) = b in (a,b,c)

qmap : (QBit -o QBit) -o (QBit >< QBit) -o (QBit >< QBit)
qmap f a = let (x,y) = a in (f x, y)

-- main : Bit 
-- main = let (a,b) = qmap X (new 1, new 1) in (meas a) -- 0