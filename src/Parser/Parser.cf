PDef.  Program ::= [FunDec] ;

--- Terms ---
TVar  . Term3 ::= Var                                                    ;
TBit  . Term3 ::= Bit                                                    ;
TGate . Term3 ::= Gate                                                   ;
TTup  . Term3 ::= Tup                                                    ; 
TStar . Term3 ::= "*"                                                    ;
TApp  . Term2 ::= Term2 Term3                                            ; 
TIfEl . Term1 ::= "if" Term "then" Term "else" Term                      ; 
TLet  . Term1 ::= "let" "(" LetVar "," [LetVar] ")" "=" Term "in" Term   ;
TLamb . Term1 ::= Lambda FunVar Type "." Term                            ; 
TDolr . Term1 ::= Term2 "$" Term1                                        ;
coercions Term 3;

LVar . LetVar ::= Var;
separator nonempty LetVar ",";

Tuple. Tup ::= "(" Term "," [Term] ")" ;
separator nonempty Term ",";

--- Bits ---
BBit. Bit ::= Integer;

--- Function declaration  --- 
FDecl. FunDec ::= FunVar Type Function;
terminator FunDec "";

FDef.  Function ::= Var [Arg] "=" Term;

FArg. Arg ::= Var ;
separator Arg " ";

comment "--" ; 
comment "{-" "-}";

token FunVar (lower (letter | digit | '_' | '\'')* (' ')* ':') ;
 
--- Var ---
token Var (lower (letter | digit | '_' | '\'')*) ;

--- GateIdent ---
token GateIdent (upper (upper | digit)*) ;

--- Lambda token ---
-- token Lambda char (0xBB) ;
token Lambda '\\' ;

--- Type ---
TypeBit  . Type2  ::= "Bit"            ;
TypeQbit . Type2  ::= "QBit"           ;
TypeUnit . Type2  ::= "T"              ;
TypeDup  . Type2  ::= "!" Type2        ;
TypeTens . Type1  ::= Type2 "><" Type1 ;
TypeFunc . Type1  ::= Type2 "-o" Type1 ;
coercions Type 2;

--- Gates ---
GH     . Gate ::= "H"            ;
GX     . Gate ::= "X"            ;
GY     . Gate ::= "Y"            ;
GZ     . Gate ::= "Z"            ;
GI     . Gate ::= "I"            ;
GS     . Gate ::= "S"            ;
GT     . Gate ::= "T"            ;
GCNOT  . Gate ::= "CNOT"         ;
GTOF   . Gate ::= "TOFFOLI"      ;
GSWP   . Gate ::= "SWAP"         ;
GFRDK  . Gate ::= "FREDKIN"      ;
GIdent . Gate ::= GateIdent      ;