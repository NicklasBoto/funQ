-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Parser.Abs where

newtype FunVar = FunVar String
  deriving (Eq, Ord, Show, Read)

newtype Var = Var String
  deriving (Eq, Ord, Show, Read)

newtype GateIdent = GateIdent String
  deriving (Eq, Ord, Show, Read)

newtype Lambda = Lambda String
  deriving (Eq, Ord, Show, Read)

data Program = PDef [FunDec]
  deriving (Eq, Ord, Show, Read)

data Term
    = TVar Var
    | TBit Bit
    | TGate Gate
    | TTup Tup
    | TStar
    | TApp Term Term
    | TIfEl Term Term Term
    | TLet LetVar [LetVar] Term Term
    | TLamb Lambda Var Term
  deriving (Eq, Ord, Show, Read)

data LetVar = LVar Var
  deriving (Eq, Ord, Show, Read)

data Tup = Tuple Term [Term]
  deriving (Eq, Ord, Show, Read)

data Bit = BZero | BOne
  deriving (Eq, Ord, Show, Read)

data FunDec = FDecl FunVar Type Function
  deriving (Eq, Ord, Show, Read)

data Function = FDef Var [Arg] Term
  deriving (Eq, Ord, Show, Read)

data Arg = FArg Var
  deriving (Eq, Ord, Show, Read)

data Type
    = TypeVar Var
    | TypeBit
    | TypeQbit
    | TypeVoid
    | TypeDup Type
    | TypeTens Type Type
    | TypeFunc Type Type
  deriving (Eq, Ord, Show, Read)

data Gate
    = GH
    | GX
    | GY
    | GZ
    | GI
    | GS
    | GT
    | GCNOT
    | GTOF
    | GSWP
    | GFRDK
    | GQFT
    | GGate GateIdent
  deriving (Eq, Ord, Show, Read)

