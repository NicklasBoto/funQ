-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Parser.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Variable = Variable String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype GateIdent = GateIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Lambda = Lambda String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = PDef [FunDec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term
    = TBit Bit
    | TVar Variable
    | TTup Term Term
    | TStar
    | TMeas Term
    | TNew Term
    | TApp Term Term
    | TLamb Lambda Variable Term
    | TIfEl Term Term Term
    | TGate Gate
    | TLet Term Term Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Bit = BZero | BOne
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunDec = FDecl Variable [Type] Function
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Function = FDef Variable [Arg] Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = FArg Variable
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = TypeBit | TQbit | TVoid | TTens Type Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Gate
    = GH
    | GX
    | GY
    | GZ
    | GI
    | GS
    | GT
    | GCNOT
    | GTOF
    | GSWP
    | GFRDK
    | GGate GateIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

