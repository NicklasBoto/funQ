-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pTerm3 -> Term3                             (1)
	%start_pTerm2 -> Term2                             (2)
	%start_pTerm1 -> Term1                             (3)
	%start_pTerm -> Term                               (4)
	%start_pLetVar -> LetVar                           (5)
	%start_pListLetVar -> ListLetVar                   (6)
	%start_pTup -> Tup                                 (7)
	%start_pListTerm -> ListTerm                       (8)
	%start_pBit -> Bit                                 (9)
	%start_pFunDec -> FunDec                           (10)
	%start_pListFunDec -> ListFunDec                   (11)
	%start_pFunction -> Function                       (12)
	%start_pArg -> Arg                                 (13)
	%start_pListArg -> ListArg                         (14)
	%start_pType2 -> Type2                             (15)
	%start_pType1 -> Type1                             (16)
	%start_pType -> Type                               (17)
	%start_pGate -> Gate                               (18)
	Integer -> L_integ                                 (19)
	FunVar -> L_FunVar                                 (20)
	Var -> L_Var                                       (21)
	GateIdent -> L_GateIdent                           (22)
	Lambda -> L_Lambda                                 (23)
	Program -> ListFunDec                              (24)
	Term3 -> Var                                       (25)
	Term3 -> Bit                                       (26)
	Term3 -> Gate                                      (27)
	Term3 -> Tup                                       (28)
	Term3 -> '*'                                       (29)
	Term3 -> '(' Term ')'                              (30)
	Term2 -> Term2 Term3                               (31)
	Term2 -> Term3                                     (32)
	Term1 -> 'if' Term2 'then' Term 'else' Term        (33)
	Term1 -> 'let' '(' LetVar ',' ListLetVar ')' '=' Term 'in' Term   (34)
	Term1 -> Lambda FunVar Type '.' Term               (35)
	Term1 -> Term2                                     (36)
	Term -> Term1                                      (37)
	LetVar -> Var                                      (38)
	ListLetVar -> LetVar                               (39)
	ListLetVar -> LetVar ',' ListLetVar                (40)
	Tup -> '(' Term ',' ListTerm ')'                   (41)
	ListTerm -> Term                                   (42)
	ListTerm -> Term ',' ListTerm                      (43)
	Bit -> Integer                                     (44)
	FunDec -> FunVar Type Function                     (45)
	ListFunDec ->                                      (46)
	ListFunDec -> FunDec ListFunDec                    (47)
	Function -> Var ListArg '=' Term                   (48)
	Arg -> Var                                         (49)
	ListArg ->                                         (50)
	ListArg -> Arg ListArg                             (51)
	Type2 -> 'Bit'                                     (52)
	Type2 -> 'QBit'                                    (53)
	Type2 -> 'T'                                       (54)
	Type2 -> '!' Type2                                 (55)
	Type2 -> '(' Type ')'                              (56)
	Type1 -> Type2 '><' Type1                          (57)
	Type1 -> Type2 '-o' Type1                          (58)
	Type1 -> Type2                                     (59)
	Type -> Type1                                      (60)
	Gate -> 'H'                                        (61)
	Gate -> 'X'                                        (62)
	Gate -> 'Y'                                        (63)
	Gate -> 'Z'                                        (64)
	Gate -> 'I'                                        (65)
	Gate -> 'S'                                        (66)
	Gate -> 'T'                                        (67)
	Gate -> 'CNOT'                                     (68)
	Gate -> 'TOFFOLI'                                  (69)
	Gate -> 'SWAP'                                     (70)
	Gate -> 'FREDKIN'                                  (71)
	Gate -> GateIdent                                  (72)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	'*'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'-o'           { PT _ (TS _ 6) }
	'.'            { PT _ (TS _ 7) }
	'='            { PT _ (TS _ 8) }
	'><'           { PT _ (TS _ 9) }
	'Bit'          { PT _ (TS _ 10) }
	'CNOT'         { PT _ (TS _ 11) }
	'FREDKIN'      { PT _ (TS _ 12) }
	'H'            { PT _ (TS _ 13) }
	'I'            { PT _ (TS _ 14) }
	'QBit'         { PT _ (TS _ 15) }
	'S'            { PT _ (TS _ 16) }
	'SWAP'         { PT _ (TS _ 17) }
	'T'            { PT _ (TS _ 18) }
	'TOFFOLI'      { PT _ (TS _ 19) }
	'X'            { PT _ (TS _ 20) }
	'Y'            { PT _ (TS _ 21) }
	'Z'            { PT _ (TS _ 22) }
	'else'         { PT _ (TS _ 23) }
	'if'           { PT _ (TS _ 24) }
	'in'           { PT _ (TS _ 25) }
	'let'          { PT _ (TS _ 26) }
	'then'         { PT _ (TS _ 27) }
	L_integ        { PT _ (TI $$) }
	L_FunVar       { PT _ (T_FunVar $$) }
	L_Var          { PT _ (T_Var $$) }
	L_GateIdent    { PT _ (T_GateIdent $$) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pTerm3   rule  1
	%start_pTerm2   rule  2
	%start_pTerm1   rule  3
	%start_pTerm    rule  4
	%start_pLetVar  rule  5
	%start_pListLetVar rule  6
	%start_pTup     rule  7
	%start_pListTerm rule  8
	%start_pBit     rule  9
	%start_pFunDec  rule  10
	%start_pListFunDec rule  11
	%start_pFunction rule  12
	%start_pArg     rule  13
	%start_pListArg rule  14
	%start_pType2   rule  15
	%start_pType1   rule  16
	%start_pType    rule  17
	%start_pGate    rule  18
	Integer         rule  19
	FunVar          rule  20
	Var             rule  21
	GateIdent       rule  22
	Lambda          rule  23
	Program         rule  24
	Term3           rules 25, 26, 27, 28, 29, 30
	Term2           rules 31, 32
	Term1           rules 33, 34, 35, 36
	Term            rule  37
	LetVar          rule  38
	ListLetVar      rules 39, 40
	Tup             rule  41
	ListTerm        rules 42, 43
	Bit             rule  44
	FunDec          rule  45
	ListFunDec      rules 46, 47
	Function        rule  48
	Arg             rule  49
	ListArg         rules 50, 51
	Type2           rules 52, 53, 54, 55, 56
	Type1           rules 57, 58, 59
	Type            rule  60
	Gate            rules 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_FunVar       shift, and enter state 55
	%eof           reduce using rule 46

	FunVar         goto state 52
	Program        goto state 84
	FunDec         goto state 53
	ListFunDec     goto state 85

State 1

	%start_pTerm3 -> . Term3                            (rule 1)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Term3          goto state 83
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 2

	%start_pTerm2 -> . Term2                            (rule 2)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Term3          goto state 61
	Term2          goto state 82
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 3

	%start_pTerm1 -> . Term1                            (rule 3)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 81
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 4

	%start_pTerm -> . Term                              (rule 4)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 80
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 5

	%start_pLetVar -> . LetVar                          (rule 5)

	L_Var          shift, and enter state 48

	Var            goto state 76
	LetVar         goto state 79

State 6

	%start_pListLetVar -> . ListLetVar                  (rule 6)

	L_Var          shift, and enter state 48

	Var            goto state 76
	LetVar         goto state 77
	ListLetVar     goto state 78

State 7

	%start_pTup -> . Tup                                (rule 7)

	'('            shift, and enter state 75

	Tup            goto state 74

State 8

	%start_pListTerm -> . ListTerm                      (rule 8)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 64
	Tup            goto state 65
	ListTerm       goto state 66
	Bit            goto state 67
	Gate           goto state 68

State 9

	%start_pBit -> . Bit                                (rule 9)

	L_integ        shift, and enter state 20

	Integer        goto state 57
	Bit            goto state 58

State 10

	%start_pFunDec -> . FunDec                          (rule 10)

	L_FunVar       shift, and enter state 55

	FunVar         goto state 52
	FunDec         goto state 56

State 11

	%start_pListFunDec -> . ListFunDec                  (rule 11)

	L_FunVar       shift, and enter state 55
	%eof           reduce using rule 46

	FunVar         goto state 52
	FunDec         goto state 53
	ListFunDec     goto state 54

State 12

	%start_pFunction -> . Function                      (rule 12)

	L_Var          shift, and enter state 48

	Var            goto state 50
	Function       goto state 51

State 13

	%start_pArg -> . Arg                                (rule 13)

	L_Var          shift, and enter state 48

	Var            goto state 45
	Arg            goto state 49

State 14

	%start_pListArg -> . ListArg                        (rule 14)

	L_Var          shift, and enter state 48
	%eof           reduce using rule 50

	Var            goto state 45
	Arg            goto state 46
	ListArg        goto state 47

State 15

	%start_pType2 -> . Type2                            (rule 15)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 44

State 16

	%start_pType1 -> . Type1                            (rule 16)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 35
	Type1          goto state 43

State 17

	%start_pType -> . Type                              (rule 17)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 35
	Type1          goto state 36
	Type           goto state 37

State 18

	%start_pGate -> . Gate                              (rule 18)

	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	L_GateIdent    shift, and enter state 34

	GateIdent      goto state 21
	Gate           goto state 22

State 19

	Integer -> . L_integ                                (rule 19)

	L_integ        shift, and enter state 20


State 20

	Integer -> L_integ .                                (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'*'            reduce using rule 19
	','            reduce using rule 19
	'CNOT'         reduce using rule 19
	'FREDKIN'      reduce using rule 19
	'H'            reduce using rule 19
	'I'            reduce using rule 19
	'S'            reduce using rule 19
	'SWAP'         reduce using rule 19
	'T'            reduce using rule 19
	'TOFFOLI'      reduce using rule 19
	'X'            reduce using rule 19
	'Y'            reduce using rule 19
	'Z'            reduce using rule 19
	'else'         reduce using rule 19
	'in'           reduce using rule 19
	'then'         reduce using rule 19
	L_integ        reduce using rule 19
	L_FunVar       reduce using rule 19
	L_Var          reduce using rule 19
	L_GateIdent    reduce using rule 19
	%eof           reduce using rule 19


State 21

	Gate -> GateIdent .                                 (rule 72)

	'('            reduce using rule 72
	')'            reduce using rule 72
	'*'            reduce using rule 72
	','            reduce using rule 72
	'CNOT'         reduce using rule 72
	'FREDKIN'      reduce using rule 72
	'H'            reduce using rule 72
	'I'            reduce using rule 72
	'S'            reduce using rule 72
	'SWAP'         reduce using rule 72
	'T'            reduce using rule 72
	'TOFFOLI'      reduce using rule 72
	'X'            reduce using rule 72
	'Y'            reduce using rule 72
	'Z'            reduce using rule 72
	'else'         reduce using rule 72
	'in'           reduce using rule 72
	'then'         reduce using rule 72
	L_integ        reduce using rule 72
	L_FunVar       reduce using rule 72
	L_Var          reduce using rule 72
	L_GateIdent    reduce using rule 72
	%eof           reduce using rule 72


State 22

	%start_pGate -> Gate .                              (rule 18)

	%eof           accept


State 23

	Gate -> 'CNOT' .                                    (rule 68)

	'('            reduce using rule 68
	')'            reduce using rule 68
	'*'            reduce using rule 68
	','            reduce using rule 68
	'CNOT'         reduce using rule 68
	'FREDKIN'      reduce using rule 68
	'H'            reduce using rule 68
	'I'            reduce using rule 68
	'S'            reduce using rule 68
	'SWAP'         reduce using rule 68
	'T'            reduce using rule 68
	'TOFFOLI'      reduce using rule 68
	'X'            reduce using rule 68
	'Y'            reduce using rule 68
	'Z'            reduce using rule 68
	'else'         reduce using rule 68
	'in'           reduce using rule 68
	'then'         reduce using rule 68
	L_integ        reduce using rule 68
	L_FunVar       reduce using rule 68
	L_Var          reduce using rule 68
	L_GateIdent    reduce using rule 68
	%eof           reduce using rule 68


State 24

	Gate -> 'FREDKIN' .                                 (rule 71)

	'('            reduce using rule 71
	')'            reduce using rule 71
	'*'            reduce using rule 71
	','            reduce using rule 71
	'CNOT'         reduce using rule 71
	'FREDKIN'      reduce using rule 71
	'H'            reduce using rule 71
	'I'            reduce using rule 71
	'S'            reduce using rule 71
	'SWAP'         reduce using rule 71
	'T'            reduce using rule 71
	'TOFFOLI'      reduce using rule 71
	'X'            reduce using rule 71
	'Y'            reduce using rule 71
	'Z'            reduce using rule 71
	'else'         reduce using rule 71
	'in'           reduce using rule 71
	'then'         reduce using rule 71
	L_integ        reduce using rule 71
	L_FunVar       reduce using rule 71
	L_Var          reduce using rule 71
	L_GateIdent    reduce using rule 71
	%eof           reduce using rule 71


State 25

	Gate -> 'H' .                                       (rule 61)

	'('            reduce using rule 61
	')'            reduce using rule 61
	'*'            reduce using rule 61
	','            reduce using rule 61
	'CNOT'         reduce using rule 61
	'FREDKIN'      reduce using rule 61
	'H'            reduce using rule 61
	'I'            reduce using rule 61
	'S'            reduce using rule 61
	'SWAP'         reduce using rule 61
	'T'            reduce using rule 61
	'TOFFOLI'      reduce using rule 61
	'X'            reduce using rule 61
	'Y'            reduce using rule 61
	'Z'            reduce using rule 61
	'else'         reduce using rule 61
	'in'           reduce using rule 61
	'then'         reduce using rule 61
	L_integ        reduce using rule 61
	L_FunVar       reduce using rule 61
	L_Var          reduce using rule 61
	L_GateIdent    reduce using rule 61
	%eof           reduce using rule 61


State 26

	Gate -> 'I' .                                       (rule 65)

	'('            reduce using rule 65
	')'            reduce using rule 65
	'*'            reduce using rule 65
	','            reduce using rule 65
	'CNOT'         reduce using rule 65
	'FREDKIN'      reduce using rule 65
	'H'            reduce using rule 65
	'I'            reduce using rule 65
	'S'            reduce using rule 65
	'SWAP'         reduce using rule 65
	'T'            reduce using rule 65
	'TOFFOLI'      reduce using rule 65
	'X'            reduce using rule 65
	'Y'            reduce using rule 65
	'Z'            reduce using rule 65
	'else'         reduce using rule 65
	'in'           reduce using rule 65
	'then'         reduce using rule 65
	L_integ        reduce using rule 65
	L_FunVar       reduce using rule 65
	L_Var          reduce using rule 65
	L_GateIdent    reduce using rule 65
	%eof           reduce using rule 65


State 27

	Gate -> 'S' .                                       (rule 66)

	'('            reduce using rule 66
	')'            reduce using rule 66
	'*'            reduce using rule 66
	','            reduce using rule 66
	'CNOT'         reduce using rule 66
	'FREDKIN'      reduce using rule 66
	'H'            reduce using rule 66
	'I'            reduce using rule 66
	'S'            reduce using rule 66
	'SWAP'         reduce using rule 66
	'T'            reduce using rule 66
	'TOFFOLI'      reduce using rule 66
	'X'            reduce using rule 66
	'Y'            reduce using rule 66
	'Z'            reduce using rule 66
	'else'         reduce using rule 66
	'in'           reduce using rule 66
	'then'         reduce using rule 66
	L_integ        reduce using rule 66
	L_FunVar       reduce using rule 66
	L_Var          reduce using rule 66
	L_GateIdent    reduce using rule 66
	%eof           reduce using rule 66


State 28

	Gate -> 'SWAP' .                                    (rule 70)

	'('            reduce using rule 70
	')'            reduce using rule 70
	'*'            reduce using rule 70
	','            reduce using rule 70
	'CNOT'         reduce using rule 70
	'FREDKIN'      reduce using rule 70
	'H'            reduce using rule 70
	'I'            reduce using rule 70
	'S'            reduce using rule 70
	'SWAP'         reduce using rule 70
	'T'            reduce using rule 70
	'TOFFOLI'      reduce using rule 70
	'X'            reduce using rule 70
	'Y'            reduce using rule 70
	'Z'            reduce using rule 70
	'else'         reduce using rule 70
	'in'           reduce using rule 70
	'then'         reduce using rule 70
	L_integ        reduce using rule 70
	L_FunVar       reduce using rule 70
	L_Var          reduce using rule 70
	L_GateIdent    reduce using rule 70
	%eof           reduce using rule 70


State 29

	Gate -> 'T' .                                       (rule 67)

	'('            reduce using rule 67
	')'            reduce using rule 67
	'*'            reduce using rule 67
	','            reduce using rule 67
	'CNOT'         reduce using rule 67
	'FREDKIN'      reduce using rule 67
	'H'            reduce using rule 67
	'I'            reduce using rule 67
	'S'            reduce using rule 67
	'SWAP'         reduce using rule 67
	'T'            reduce using rule 67
	'TOFFOLI'      reduce using rule 67
	'X'            reduce using rule 67
	'Y'            reduce using rule 67
	'Z'            reduce using rule 67
	'else'         reduce using rule 67
	'in'           reduce using rule 67
	'then'         reduce using rule 67
	L_integ        reduce using rule 67
	L_FunVar       reduce using rule 67
	L_Var          reduce using rule 67
	L_GateIdent    reduce using rule 67
	%eof           reduce using rule 67


State 30

	Gate -> 'TOFFOLI' .                                 (rule 69)

	'('            reduce using rule 69
	')'            reduce using rule 69
	'*'            reduce using rule 69
	','            reduce using rule 69
	'CNOT'         reduce using rule 69
	'FREDKIN'      reduce using rule 69
	'H'            reduce using rule 69
	'I'            reduce using rule 69
	'S'            reduce using rule 69
	'SWAP'         reduce using rule 69
	'T'            reduce using rule 69
	'TOFFOLI'      reduce using rule 69
	'X'            reduce using rule 69
	'Y'            reduce using rule 69
	'Z'            reduce using rule 69
	'else'         reduce using rule 69
	'in'           reduce using rule 69
	'then'         reduce using rule 69
	L_integ        reduce using rule 69
	L_FunVar       reduce using rule 69
	L_Var          reduce using rule 69
	L_GateIdent    reduce using rule 69
	%eof           reduce using rule 69


State 31

	Gate -> 'X' .                                       (rule 62)

	'('            reduce using rule 62
	')'            reduce using rule 62
	'*'            reduce using rule 62
	','            reduce using rule 62
	'CNOT'         reduce using rule 62
	'FREDKIN'      reduce using rule 62
	'H'            reduce using rule 62
	'I'            reduce using rule 62
	'S'            reduce using rule 62
	'SWAP'         reduce using rule 62
	'T'            reduce using rule 62
	'TOFFOLI'      reduce using rule 62
	'X'            reduce using rule 62
	'Y'            reduce using rule 62
	'Z'            reduce using rule 62
	'else'         reduce using rule 62
	'in'           reduce using rule 62
	'then'         reduce using rule 62
	L_integ        reduce using rule 62
	L_FunVar       reduce using rule 62
	L_Var          reduce using rule 62
	L_GateIdent    reduce using rule 62
	%eof           reduce using rule 62


State 32

	Gate -> 'Y' .                                       (rule 63)

	'('            reduce using rule 63
	')'            reduce using rule 63
	'*'            reduce using rule 63
	','            reduce using rule 63
	'CNOT'         reduce using rule 63
	'FREDKIN'      reduce using rule 63
	'H'            reduce using rule 63
	'I'            reduce using rule 63
	'S'            reduce using rule 63
	'SWAP'         reduce using rule 63
	'T'            reduce using rule 63
	'TOFFOLI'      reduce using rule 63
	'X'            reduce using rule 63
	'Y'            reduce using rule 63
	'Z'            reduce using rule 63
	'else'         reduce using rule 63
	'in'           reduce using rule 63
	'then'         reduce using rule 63
	L_integ        reduce using rule 63
	L_FunVar       reduce using rule 63
	L_Var          reduce using rule 63
	L_GateIdent    reduce using rule 63
	%eof           reduce using rule 63


State 33

	Gate -> 'Z' .                                       (rule 64)

	'('            reduce using rule 64
	')'            reduce using rule 64
	'*'            reduce using rule 64
	','            reduce using rule 64
	'CNOT'         reduce using rule 64
	'FREDKIN'      reduce using rule 64
	'H'            reduce using rule 64
	'I'            reduce using rule 64
	'S'            reduce using rule 64
	'SWAP'         reduce using rule 64
	'T'            reduce using rule 64
	'TOFFOLI'      reduce using rule 64
	'X'            reduce using rule 64
	'Y'            reduce using rule 64
	'Z'            reduce using rule 64
	'else'         reduce using rule 64
	'in'           reduce using rule 64
	'then'         reduce using rule 64
	L_integ        reduce using rule 64
	L_FunVar       reduce using rule 64
	L_Var          reduce using rule 64
	L_GateIdent    reduce using rule 64
	%eof           reduce using rule 64


State 34

	GateIdent -> L_GateIdent .                          (rule 22)

	'('            reduce using rule 22
	')'            reduce using rule 22
	'*'            reduce using rule 22
	','            reduce using rule 22
	'CNOT'         reduce using rule 22
	'FREDKIN'      reduce using rule 22
	'H'            reduce using rule 22
	'I'            reduce using rule 22
	'S'            reduce using rule 22
	'SWAP'         reduce using rule 22
	'T'            reduce using rule 22
	'TOFFOLI'      reduce using rule 22
	'X'            reduce using rule 22
	'Y'            reduce using rule 22
	'Z'            reduce using rule 22
	'else'         reduce using rule 22
	'in'           reduce using rule 22
	'then'         reduce using rule 22
	L_integ        reduce using rule 22
	L_FunVar       reduce using rule 22
	L_Var          reduce using rule 22
	L_GateIdent    reduce using rule 22
	%eof           reduce using rule 22


State 35

	Type1 -> Type2 . '><' Type1                         (rule 57)
	Type1 -> Type2 . '-o' Type1                         (rule 58)
	Type1 -> Type2 .                                    (rule 59)

	')'            reduce using rule 59
	'-o'           shift, and enter state 100
	'.'            reduce using rule 59
	'><'           shift, and enter state 101
	L_Var          reduce using rule 59
	%eof           reduce using rule 59


State 36

	Type -> Type1 .                                     (rule 60)

	')'            reduce using rule 60
	'.'            reduce using rule 60
	L_Var          reduce using rule 60
	%eof           reduce using rule 60


State 37

	%start_pType -> Type .                              (rule 17)

	%eof           accept


State 38

	Type2 -> '!' . Type2                                (rule 55)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 99

State 39

	Type2 -> '(' . Type ')'                             (rule 56)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 35
	Type1          goto state 36
	Type           goto state 98

State 40

	Type2 -> 'Bit' .                                    (rule 52)

	')'            reduce using rule 52
	'-o'           reduce using rule 52
	'.'            reduce using rule 52
	'><'           reduce using rule 52
	L_Var          reduce using rule 52
	%eof           reduce using rule 52


State 41

	Type2 -> 'QBit' .                                   (rule 53)

	')'            reduce using rule 53
	'-o'           reduce using rule 53
	'.'            reduce using rule 53
	'><'           reduce using rule 53
	L_Var          reduce using rule 53
	%eof           reduce using rule 53


State 42

	Type2 -> 'T' .                                      (rule 54)

	')'            reduce using rule 54
	'-o'           reduce using rule 54
	'.'            reduce using rule 54
	'><'           reduce using rule 54
	L_Var          reduce using rule 54
	%eof           reduce using rule 54


State 43

	%start_pType1 -> Type1 .                            (rule 16)

	%eof           accept


State 44

	%start_pType2 -> Type2 .                            (rule 15)

	%eof           accept


State 45

	Arg -> Var .                                        (rule 49)

	'='            reduce using rule 49
	L_Var          reduce using rule 49
	%eof           reduce using rule 49


State 46

	ListArg -> Arg . ListArg                            (rule 51)

	'='            reduce using rule 50
	L_Var          shift, and enter state 48
	%eof           reduce using rule 50

	Var            goto state 45
	Arg            goto state 46
	ListArg        goto state 97

State 47

	%start_pListArg -> ListArg .                        (rule 14)

	%eof           accept


State 48

	Var -> L_Var .                                      (rule 21)

	'('            reduce using rule 21
	')'            reduce using rule 21
	'*'            reduce using rule 21
	','            reduce using rule 21
	'='            reduce using rule 21
	'CNOT'         reduce using rule 21
	'FREDKIN'      reduce using rule 21
	'H'            reduce using rule 21
	'I'            reduce using rule 21
	'S'            reduce using rule 21
	'SWAP'         reduce using rule 21
	'T'            reduce using rule 21
	'TOFFOLI'      reduce using rule 21
	'X'            reduce using rule 21
	'Y'            reduce using rule 21
	'Z'            reduce using rule 21
	'else'         reduce using rule 21
	'in'           reduce using rule 21
	'then'         reduce using rule 21
	L_integ        reduce using rule 21
	L_FunVar       reduce using rule 21
	L_Var          reduce using rule 21
	L_GateIdent    reduce using rule 21
	%eof           reduce using rule 21


State 49

	%start_pArg -> Arg .                                (rule 13)

	%eof           accept


State 50

	Function -> Var . ListArg '=' Term                  (rule 48)

	'='            reduce using rule 50
	L_Var          shift, and enter state 48

	Var            goto state 45
	Arg            goto state 46
	ListArg        goto state 96

State 51

	%start_pFunction -> Function .                      (rule 12)

	%eof           accept


State 52

	FunDec -> FunVar . Type Function                    (rule 45)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 35
	Type1          goto state 36
	Type           goto state 95

State 53

	ListFunDec -> FunDec . ListFunDec                   (rule 47)

	L_FunVar       shift, and enter state 55
	%eof           reduce using rule 46

	FunVar         goto state 52
	FunDec         goto state 53
	ListFunDec     goto state 94

State 54

	%start_pListFunDec -> ListFunDec .                  (rule 11)

	%eof           accept


State 55

	FunVar -> L_FunVar .                                (rule 20)

	'!'            reduce using rule 20
	'('            reduce using rule 20
	'Bit'          reduce using rule 20
	'QBit'         reduce using rule 20
	'T'            reduce using rule 20


State 56

	%start_pFunDec -> FunDec .                          (rule 10)

	%eof           accept


State 57

	Bit -> Integer .                                    (rule 44)

	'('            reduce using rule 44
	')'            reduce using rule 44
	'*'            reduce using rule 44
	','            reduce using rule 44
	'CNOT'         reduce using rule 44
	'FREDKIN'      reduce using rule 44
	'H'            reduce using rule 44
	'I'            reduce using rule 44
	'S'            reduce using rule 44
	'SWAP'         reduce using rule 44
	'T'            reduce using rule 44
	'TOFFOLI'      reduce using rule 44
	'X'            reduce using rule 44
	'Y'            reduce using rule 44
	'Z'            reduce using rule 44
	'else'         reduce using rule 44
	'in'           reduce using rule 44
	'then'         reduce using rule 44
	L_integ        reduce using rule 44
	L_FunVar       reduce using rule 44
	L_Var          reduce using rule 44
	L_GateIdent    reduce using rule 44
	%eof           reduce using rule 44


State 58

	%start_pBit -> Bit .                                (rule 9)

	%eof           accept


State 59

	Term3 -> Var .                                      (rule 25)

	'('            reduce using rule 25
	')'            reduce using rule 25
	'*'            reduce using rule 25
	','            reduce using rule 25
	'CNOT'         reduce using rule 25
	'FREDKIN'      reduce using rule 25
	'H'            reduce using rule 25
	'I'            reduce using rule 25
	'S'            reduce using rule 25
	'SWAP'         reduce using rule 25
	'T'            reduce using rule 25
	'TOFFOLI'      reduce using rule 25
	'X'            reduce using rule 25
	'Y'            reduce using rule 25
	'Z'            reduce using rule 25
	'else'         reduce using rule 25
	'in'           reduce using rule 25
	'then'         reduce using rule 25
	L_integ        reduce using rule 25
	L_FunVar       reduce using rule 25
	L_Var          reduce using rule 25
	L_GateIdent    reduce using rule 25
	%eof           reduce using rule 25


State 60

	Term1 -> Lambda . FunVar Type '.' Term              (rule 35)

	L_FunVar       shift, and enter state 55

	FunVar         goto state 93

State 61

	Term2 -> Term3 .                                    (rule 32)

	'('            reduce using rule 32
	')'            reduce using rule 32
	'*'            reduce using rule 32
	','            reduce using rule 32
	'CNOT'         reduce using rule 32
	'FREDKIN'      reduce using rule 32
	'H'            reduce using rule 32
	'I'            reduce using rule 32
	'S'            reduce using rule 32
	'SWAP'         reduce using rule 32
	'T'            reduce using rule 32
	'TOFFOLI'      reduce using rule 32
	'X'            reduce using rule 32
	'Y'            reduce using rule 32
	'Z'            reduce using rule 32
	'else'         reduce using rule 32
	'in'           reduce using rule 32
	'then'         reduce using rule 32
	L_integ        reduce using rule 32
	L_FunVar       reduce using rule 32
	L_Var          reduce using rule 32
	L_GateIdent    reduce using rule 32
	%eof           reduce using rule 32


State 62

	Term2 -> Term2 . Term3                              (rule 31)
	Term1 -> Term2 .                                    (rule 36)

	'('            shift, and enter state 69
	')'            reduce using rule 36
	'*'            shift, and enter state 70
	','            reduce using rule 36
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'else'         reduce using rule 36
	'in'           reduce using rule 36
	L_integ        shift, and enter state 20
	L_FunVar       reduce using rule 36
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	%eof           reduce using rule 36

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Term3          goto state 86
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 63

	Term -> Term1 .                                     (rule 37)

	')'            reduce using rule 37
	','            reduce using rule 37
	'else'         reduce using rule 37
	'in'           reduce using rule 37
	L_FunVar       reduce using rule 37
	%eof           reduce using rule 37


State 64

	ListTerm -> Term .                                  (rule 42)
	ListTerm -> Term . ',' ListTerm                     (rule 43)

	')'            reduce using rule 42
	','            shift, and enter state 92
	%eof           reduce using rule 42


State 65

	Term3 -> Tup .                                      (rule 28)

	'('            reduce using rule 28
	')'            reduce using rule 28
	'*'            reduce using rule 28
	','            reduce using rule 28
	'CNOT'         reduce using rule 28
	'FREDKIN'      reduce using rule 28
	'H'            reduce using rule 28
	'I'            reduce using rule 28
	'S'            reduce using rule 28
	'SWAP'         reduce using rule 28
	'T'            reduce using rule 28
	'TOFFOLI'      reduce using rule 28
	'X'            reduce using rule 28
	'Y'            reduce using rule 28
	'Z'            reduce using rule 28
	'else'         reduce using rule 28
	'in'           reduce using rule 28
	'then'         reduce using rule 28
	L_integ        reduce using rule 28
	L_FunVar       reduce using rule 28
	L_Var          reduce using rule 28
	L_GateIdent    reduce using rule 28
	%eof           reduce using rule 28


State 66

	%start_pListTerm -> ListTerm .                      (rule 8)

	%eof           accept


State 67

	Term3 -> Bit .                                      (rule 26)

	'('            reduce using rule 26
	')'            reduce using rule 26
	'*'            reduce using rule 26
	','            reduce using rule 26
	'CNOT'         reduce using rule 26
	'FREDKIN'      reduce using rule 26
	'H'            reduce using rule 26
	'I'            reduce using rule 26
	'S'            reduce using rule 26
	'SWAP'         reduce using rule 26
	'T'            reduce using rule 26
	'TOFFOLI'      reduce using rule 26
	'X'            reduce using rule 26
	'Y'            reduce using rule 26
	'Z'            reduce using rule 26
	'else'         reduce using rule 26
	'in'           reduce using rule 26
	'then'         reduce using rule 26
	L_integ        reduce using rule 26
	L_FunVar       reduce using rule 26
	L_Var          reduce using rule 26
	L_GateIdent    reduce using rule 26
	%eof           reduce using rule 26


State 68

	Term3 -> Gate .                                     (rule 27)

	'('            reduce using rule 27
	')'            reduce using rule 27
	'*'            reduce using rule 27
	','            reduce using rule 27
	'CNOT'         reduce using rule 27
	'FREDKIN'      reduce using rule 27
	'H'            reduce using rule 27
	'I'            reduce using rule 27
	'S'            reduce using rule 27
	'SWAP'         reduce using rule 27
	'T'            reduce using rule 27
	'TOFFOLI'      reduce using rule 27
	'X'            reduce using rule 27
	'Y'            reduce using rule 27
	'Z'            reduce using rule 27
	'else'         reduce using rule 27
	'in'           reduce using rule 27
	'then'         reduce using rule 27
	L_integ        reduce using rule 27
	L_FunVar       reduce using rule 27
	L_Var          reduce using rule 27
	L_GateIdent    reduce using rule 27
	%eof           reduce using rule 27


State 69

	Term3 -> '(' . Term ')'                             (rule 30)
	Tup -> '(' . Term ',' ListTerm ')'                  (rule 41)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 91
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 70

	Term3 -> '*' .                                      (rule 29)

	'('            reduce using rule 29
	')'            reduce using rule 29
	'*'            reduce using rule 29
	','            reduce using rule 29
	'CNOT'         reduce using rule 29
	'FREDKIN'      reduce using rule 29
	'H'            reduce using rule 29
	'I'            reduce using rule 29
	'S'            reduce using rule 29
	'SWAP'         reduce using rule 29
	'T'            reduce using rule 29
	'TOFFOLI'      reduce using rule 29
	'X'            reduce using rule 29
	'Y'            reduce using rule 29
	'Z'            reduce using rule 29
	'else'         reduce using rule 29
	'in'           reduce using rule 29
	'then'         reduce using rule 29
	L_integ        reduce using rule 29
	L_FunVar       reduce using rule 29
	L_Var          reduce using rule 29
	L_GateIdent    reduce using rule 29
	%eof           reduce using rule 29


State 71

	Term1 -> 'if' . Term2 'then' Term 'else' Term       (rule 33)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Term3          goto state 61
	Term2          goto state 90
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 72

	Term1 -> 'let' . '(' LetVar ',' ListLetVar ')' '=' Term 'in' Term    (rule 34)

	'('            shift, and enter state 89


State 73

	Lambda -> L_Lambda .                                (rule 23)

	L_FunVar       reduce using rule 23


State 74

	%start_pTup -> Tup .                                (rule 7)

	%eof           accept


State 75

	Tup -> '(' . Term ',' ListTerm ')'                  (rule 41)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 88
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 76

	LetVar -> Var .                                     (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	%eof           reduce using rule 38


State 77

	ListLetVar -> LetVar .                              (rule 39)
	ListLetVar -> LetVar . ',' ListLetVar               (rule 40)

	')'            reduce using rule 39
	','            shift, and enter state 87
	%eof           reduce using rule 39


State 78

	%start_pListLetVar -> ListLetVar .                  (rule 6)

	%eof           accept


State 79

	%start_pLetVar -> LetVar .                          (rule 5)

	%eof           accept


State 80

	%start_pTerm -> Term .                              (rule 4)

	%eof           accept


State 81

	%start_pTerm1 -> Term1 .                            (rule 3)

	%eof           accept


State 82

	%start_pTerm2 -> Term2 .                            (rule 2)
	Term2 -> Term2 . Term3                              (rule 31)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	%eof           accept

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Term3          goto state 86
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 83

	%start_pTerm3 -> Term3 .                            (rule 1)

	%eof           accept


State 84

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 85

	Program -> ListFunDec .                             (rule 24)

	%eof           reduce using rule 24


State 86

	Term2 -> Term2 Term3 .                              (rule 31)

	'('            reduce using rule 31
	')'            reduce using rule 31
	'*'            reduce using rule 31
	','            reduce using rule 31
	'CNOT'         reduce using rule 31
	'FREDKIN'      reduce using rule 31
	'H'            reduce using rule 31
	'I'            reduce using rule 31
	'S'            reduce using rule 31
	'SWAP'         reduce using rule 31
	'T'            reduce using rule 31
	'TOFFOLI'      reduce using rule 31
	'X'            reduce using rule 31
	'Y'            reduce using rule 31
	'Z'            reduce using rule 31
	'else'         reduce using rule 31
	'in'           reduce using rule 31
	'then'         reduce using rule 31
	L_integ        reduce using rule 31
	L_FunVar       reduce using rule 31
	L_Var          reduce using rule 31
	L_GateIdent    reduce using rule 31
	%eof           reduce using rule 31


State 87

	ListLetVar -> LetVar ',' . ListLetVar               (rule 40)

	L_Var          shift, and enter state 48

	Var            goto state 76
	LetVar         goto state 77
	ListLetVar     goto state 113

State 88

	Tup -> '(' Term . ',' ListTerm ')'                  (rule 41)

	','            shift, and enter state 110


State 89

	Term1 -> 'let' '(' . LetVar ',' ListLetVar ')' '=' Term 'in' Term    (rule 34)

	L_Var          shift, and enter state 48

	Var            goto state 76
	LetVar         goto state 112

State 90

	Term2 -> Term2 . Term3                              (rule 31)
	Term1 -> 'if' Term2 . 'then' Term 'else' Term       (rule 33)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'then'         shift, and enter state 111
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Term3          goto state 86
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 91

	Term3 -> '(' Term . ')'                             (rule 30)
	Tup -> '(' Term . ',' ListTerm ')'                  (rule 41)

	')'            shift, and enter state 109
	','            shift, and enter state 110


State 92

	ListTerm -> Term ',' . ListTerm                     (rule 43)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 64
	Tup            goto state 65
	ListTerm       goto state 108
	Bit            goto state 67
	Gate           goto state 68

State 93

	Term1 -> Lambda FunVar . Type '.' Term              (rule 35)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 35
	Type1          goto state 36
	Type           goto state 107

State 94

	ListFunDec -> FunDec ListFunDec .                   (rule 47)

	%eof           reduce using rule 47


State 95

	FunDec -> FunVar Type . Function                    (rule 45)

	L_Var          shift, and enter state 48

	Var            goto state 50
	Function       goto state 106

State 96

	Function -> Var ListArg . '=' Term                  (rule 48)

	'='            shift, and enter state 105


State 97

	ListArg -> Arg ListArg .                            (rule 51)

	'='            reduce using rule 51
	%eof           reduce using rule 51


State 98

	Type2 -> '(' Type . ')'                             (rule 56)

	')'            shift, and enter state 104


State 99

	Type2 -> '!' Type2 .                                (rule 55)

	')'            reduce using rule 55
	'-o'           reduce using rule 55
	'.'            reduce using rule 55
	'><'           reduce using rule 55
	L_Var          reduce using rule 55
	%eof           reduce using rule 55


State 100

	Type1 -> Type2 '-o' . Type1                         (rule 58)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 35
	Type1          goto state 103

State 101

	Type1 -> Type2 '><' . Type1                         (rule 57)

	'!'            shift, and enter state 38
	'('            shift, and enter state 39
	'Bit'          shift, and enter state 40
	'QBit'         shift, and enter state 41
	'T'            shift, and enter state 42

	Type2          goto state 35
	Type1          goto state 102

State 102

	Type1 -> Type2 '><' Type1 .                         (rule 57)

	')'            reduce using rule 57
	'.'            reduce using rule 57
	L_Var          reduce using rule 57
	%eof           reduce using rule 57


State 103

	Type1 -> Type2 '-o' Type1 .                         (rule 58)

	')'            reduce using rule 58
	'.'            reduce using rule 58
	L_Var          reduce using rule 58
	%eof           reduce using rule 58


State 104

	Type2 -> '(' Type ')' .                             (rule 56)

	')'            reduce using rule 56
	'-o'           reduce using rule 56
	'.'            reduce using rule 56
	'><'           reduce using rule 56
	L_Var          reduce using rule 56
	%eof           reduce using rule 56


State 105

	Function -> Var ListArg '=' . Term                  (rule 48)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 118
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 106

	FunDec -> FunVar Type Function .                    (rule 45)

	L_FunVar       reduce using rule 45
	%eof           reduce using rule 45


State 107

	Term1 -> Lambda FunVar Type . '.' Term              (rule 35)

	'.'            shift, and enter state 117


State 108

	ListTerm -> Term ',' ListTerm .                     (rule 43)

	')'            reduce using rule 43
	%eof           reduce using rule 43


State 109

	Term3 -> '(' Term ')' .                             (rule 30)

	'('            reduce using rule 30
	')'            reduce using rule 30
	'*'            reduce using rule 30
	','            reduce using rule 30
	'CNOT'         reduce using rule 30
	'FREDKIN'      reduce using rule 30
	'H'            reduce using rule 30
	'I'            reduce using rule 30
	'S'            reduce using rule 30
	'SWAP'         reduce using rule 30
	'T'            reduce using rule 30
	'TOFFOLI'      reduce using rule 30
	'X'            reduce using rule 30
	'Y'            reduce using rule 30
	'Z'            reduce using rule 30
	'else'         reduce using rule 30
	'in'           reduce using rule 30
	'then'         reduce using rule 30
	L_integ        reduce using rule 30
	L_FunVar       reduce using rule 30
	L_Var          reduce using rule 30
	L_GateIdent    reduce using rule 30
	%eof           reduce using rule 30


State 110

	Tup -> '(' Term ',' . ListTerm ')'                  (rule 41)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 64
	Tup            goto state 65
	ListTerm       goto state 116
	Bit            goto state 67
	Gate           goto state 68

State 111

	Term1 -> 'if' Term2 'then' . Term 'else' Term       (rule 33)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 115
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 112

	Term1 -> 'let' '(' LetVar . ',' ListLetVar ')' '=' Term 'in' Term    (rule 34)

	','            shift, and enter state 114


State 113

	ListLetVar -> LetVar ',' ListLetVar .               (rule 40)

	')'            reduce using rule 40
	%eof           reduce using rule 40


State 114

	Term1 -> 'let' '(' LetVar ',' . ListLetVar ')' '=' Term 'in' Term    (rule 34)

	L_Var          shift, and enter state 48

	Var            goto state 76
	LetVar         goto state 77
	ListLetVar     goto state 122

State 115

	Term1 -> 'if' Term2 'then' Term . 'else' Term       (rule 33)

	'else'         shift, and enter state 121


State 116

	Tup -> '(' Term ',' ListTerm . ')'                  (rule 41)

	')'            shift, and enter state 120


State 117

	Term1 -> Lambda FunVar Type '.' . Term              (rule 35)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 119
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 118

	Function -> Var ListArg '=' Term .                  (rule 48)

	L_FunVar       reduce using rule 48
	%eof           reduce using rule 48


State 119

	Term1 -> Lambda FunVar Type '.' Term .              (rule 35)

	')'            reduce using rule 35
	','            reduce using rule 35
	'else'         reduce using rule 35
	'in'           reduce using rule 35
	L_FunVar       reduce using rule 35
	%eof           reduce using rule 35


State 120

	Tup -> '(' Term ',' ListTerm ')' .                  (rule 41)

	'('            reduce using rule 41
	')'            reduce using rule 41
	'*'            reduce using rule 41
	','            reduce using rule 41
	'CNOT'         reduce using rule 41
	'FREDKIN'      reduce using rule 41
	'H'            reduce using rule 41
	'I'            reduce using rule 41
	'S'            reduce using rule 41
	'SWAP'         reduce using rule 41
	'T'            reduce using rule 41
	'TOFFOLI'      reduce using rule 41
	'X'            reduce using rule 41
	'Y'            reduce using rule 41
	'Z'            reduce using rule 41
	'else'         reduce using rule 41
	'in'           reduce using rule 41
	'then'         reduce using rule 41
	L_integ        reduce using rule 41
	L_FunVar       reduce using rule 41
	L_Var          reduce using rule 41
	L_GateIdent    reduce using rule 41
	%eof           reduce using rule 41


State 121

	Term1 -> 'if' Term2 'then' Term 'else' . Term       (rule 33)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 124
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 122

	Term1 -> 'let' '(' LetVar ',' ListLetVar . ')' '=' Term 'in' Term    (rule 34)

	')'            shift, and enter state 123


State 123

	Term1 -> 'let' '(' LetVar ',' ListLetVar ')' . '=' Term 'in' Term    (rule 34)

	'='            shift, and enter state 125


State 124

	Term1 -> 'if' Term2 'then' Term 'else' Term .       (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33
	'else'         reduce using rule 33
	'in'           reduce using rule 33
	L_FunVar       reduce using rule 33
	%eof           reduce using rule 33


State 125

	Term1 -> 'let' '(' LetVar ',' ListLetVar ')' '=' . Term 'in' Term    (rule 34)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 126
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 126

	Term1 -> 'let' '(' LetVar ',' ListLetVar ')' '=' Term . 'in' Term    (rule 34)

	'in'           shift, and enter state 127


State 127

	Term1 -> 'let' '(' LetVar ',' ListLetVar ')' '=' Term 'in' . Term    (rule 34)

	'('            shift, and enter state 69
	'*'            shift, and enter state 70
	'CNOT'         shift, and enter state 23
	'FREDKIN'      shift, and enter state 24
	'H'            shift, and enter state 25
	'I'            shift, and enter state 26
	'S'            shift, and enter state 27
	'SWAP'         shift, and enter state 28
	'T'            shift, and enter state 29
	'TOFFOLI'      shift, and enter state 30
	'X'            shift, and enter state 31
	'Y'            shift, and enter state 32
	'Z'            shift, and enter state 33
	'if'           shift, and enter state 71
	'let'          shift, and enter state 72
	L_integ        shift, and enter state 20
	L_Var          shift, and enter state 48
	L_GateIdent    shift, and enter state 34
	L_Lambda       shift, and enter state 73

	Integer        goto state 57
	Var            goto state 59
	GateIdent      goto state 21
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 128
	Tup            goto state 65
	Bit            goto state 67
	Gate           goto state 68

State 128

	Term1 -> 'let' '(' LetVar ',' ListLetVar ')' '=' Term 'in' Term .    (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34
	'else'         reduce using rule 34
	'in'           reduce using rule 34
	L_FunVar       reduce using rule 34
	%eof           reduce using rule 34


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 73
Number of terminals: 32
Number of non-terminals: 43
Number of states: 129
