-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pTerm3 -> Term3                             (1)
	%start_pTerm2 -> Term2                             (2)
	%start_pTerm1 -> Term1                             (3)
	%start_pTerm -> Term                               (4)
	%start_pTup -> Tup                                 (5)
	%start_pBit -> Bit                                 (6)
	%start_pFunDec -> FunDec                           (7)
	%start_pListFunDec -> ListFunDec                   (8)
	%start_pFunction -> Function                       (9)
	%start_pArg -> Arg                                 (10)
	%start_pListArg -> ListArg                         (11)
	%start_pType2 -> Type2                             (12)
	%start_pType1 -> Type1                             (13)
	%start_pType -> Type                               (14)
	%start_pGate -> Gate                               (15)
	FunVar -> L_FunVar                                 (16)
	Variable -> L_Variable                             (17)
	GateIdent -> L_GateIdent                           (18)
	Lambda -> L_Lambda                                 (19)
	Program -> ListFunDec                              (20)
	Term3 -> Variable                                  (21)
	Term3 -> Bit                                       (22)
	Term3 -> Gate                                      (23)
	Term3 -> Tup                                       (24)
	Term3 -> '*'                                       (25)
	Term3 -> '(' Term ')'                              (26)
	Term2 -> Term2 Term3                               (27)
	Term2 -> Term3                                     (28)
	Term1 -> 'if' Term2 'then' Term2 'else' Term       (29)
	Term1 -> 'let' Tup '=' Term2 'in' Term             (30)
	Term1 -> Lambda Variable '.' Term                  (31)
	Term1 -> Term2                                     (32)
	Term -> Term1                                      (33)
	Tup -> '(' Term ',' Term ')'                       (34)
	Bit -> '0'                                         (35)
	Bit -> '1'                                         (36)
	FunDec -> FunVar Type Function                     (37)
	ListFunDec ->                                      (38)
	ListFunDec -> FunDec ListFunDec                    (39)
	Function -> Variable ListArg '=' Term              (40)
	Arg -> Variable                                    (41)
	ListArg ->                                         (42)
	ListArg -> Arg ListArg                             (43)
	Type2 -> Variable                                  (44)
	Type2 -> 'Bit'                                     (45)
	Type2 -> 'QBit'                                    (46)
	Type2 -> 'T'                                       (47)
	Type2 -> '!' Type2                                 (48)
	Type2 -> '(' Type ')'                              (49)
	Type1 -> Type2 '><' Type1                          (50)
	Type1 -> Type2 '-o' Type1                          (51)
	Type1 -> Type2                                     (52)
	Type -> Type1                                      (53)
	Gate -> 'H'                                        (54)
	Gate -> 'X'                                        (55)
	Gate -> 'Y'                                        (56)
	Gate -> 'Z'                                        (57)
	Gate -> 'I'                                        (58)
	Gate -> 'S'                                        (59)
	Gate -> 'T'                                        (60)
	Gate -> 'CNOT'                                     (61)
	Gate -> 'TOFFOLI'                                  (62)
	Gate -> 'SWAP'                                     (63)
	Gate -> 'FREDKIN'                                  (64)
	Gate -> GateIdent                                  (65)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	'*'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'-o'           { PT _ (TS _ 6) }
	'.'            { PT _ (TS _ 7) }
	'0'            { PT _ (TS _ 8) }
	'1'            { PT _ (TS _ 9) }
	'='            { PT _ (TS _ 10) }
	'><'           { PT _ (TS _ 11) }
	'Bit'          { PT _ (TS _ 12) }
	'CNOT'         { PT _ (TS _ 13) }
	'FREDKIN'      { PT _ (TS _ 14) }
	'H'            { PT _ (TS _ 15) }
	'I'            { PT _ (TS _ 16) }
	'QBit'         { PT _ (TS _ 17) }
	'S'            { PT _ (TS _ 18) }
	'SWAP'         { PT _ (TS _ 19) }
	'T'            { PT _ (TS _ 20) }
	'TOFFOLI'      { PT _ (TS _ 21) }
	'X'            { PT _ (TS _ 22) }
	'Y'            { PT _ (TS _ 23) }
	'Z'            { PT _ (TS _ 24) }
	'else'         { PT _ (TS _ 25) }
	'if'           { PT _ (TS _ 26) }
	'in'           { PT _ (TS _ 27) }
	'let'          { PT _ (TS _ 28) }
	'then'         { PT _ (TS _ 29) }
	L_FunVar       { PT _ (T_FunVar $$) }
	L_Variable     { PT _ (T_Variable $$) }
	L_GateIdent    { PT _ (T_GateIdent $$) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pTerm3   rule  1
	%start_pTerm2   rule  2
	%start_pTerm1   rule  3
	%start_pTerm    rule  4
	%start_pTup     rule  5
	%start_pBit     rule  6
	%start_pFunDec  rule  7
	%start_pListFunDec rule  8
	%start_pFunction rule  9
	%start_pArg     rule  10
	%start_pListArg rule  11
	%start_pType2   rule  12
	%start_pType1   rule  13
	%start_pType    rule  14
	%start_pGate    rule  15
	FunVar          rule  16
	Variable        rule  17
	GateIdent       rule  18
	Lambda          rule  19
	Program         rule  20
	Term3           rules 21, 22, 23, 24, 25, 26
	Term2           rules 27, 28
	Term1           rules 29, 30, 31, 32
	Term            rule  33
	Tup             rule  34
	Bit             rules 35, 36
	FunDec          rule  37
	ListFunDec      rules 38, 39
	Function        rule  40
	Arg             rule  41
	ListArg         rules 42, 43
	Type2           rules 44, 45, 46, 47, 48, 49
	Type1           rules 50, 51, 52
	Type            rule  53
	Gate            rules 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_FunVar       shift, and enter state 17
	%eof           reduce using rule 38

	FunVar         goto state 50
	Program        goto state 76
	FunDec         goto state 51
	ListFunDec     goto state 77

State 1

	%start_pTerm3 -> . Term3                            (rule 1)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 75
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 2

	%start_pTerm2 -> . Term2                            (rule 2)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 61
	Term2          goto state 74
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 3

	%start_pTerm1 -> . Term1                            (rule 3)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 73
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 4

	%start_pTerm -> . Term                              (rule 4)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 64
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 5

	%start_pTup -> . Tup                                (rule 5)

	'('            shift, and enter state 58

	Tup            goto state 57

State 6

	%start_pBit -> . Bit                                (rule 6)

	'0'            shift, and enter state 55
	'1'            shift, and enter state 56

	Bit            goto state 54

State 7

	%start_pFunDec -> . FunDec                          (rule 7)

	L_FunVar       shift, and enter state 17

	FunVar         goto state 50
	FunDec         goto state 53

State 8

	%start_pListFunDec -> . ListFunDec                  (rule 8)

	L_FunVar       shift, and enter state 17
	%eof           reduce using rule 38

	FunVar         goto state 50
	FunDec         goto state 51
	ListFunDec     goto state 52

State 9

	%start_pFunction -> . Function                      (rule 9)

	L_Variable     shift, and enter state 41

	Variable       goto state 48
	Function       goto state 49

State 10

	%start_pArg -> . Arg                                (rule 10)

	L_Variable     shift, and enter state 41

	Variable       goto state 44
	Arg            goto state 47

State 11

	%start_pListArg -> . ListArg                        (rule 11)

	L_Variable     shift, and enter state 41
	%eof           reduce using rule 42

	Variable       goto state 44
	Arg            goto state 45
	ListArg        goto state 46

State 12

	%start_pType2 -> . Type2                            (rule 12)

	'!'            shift, and enter state 36
	'('            shift, and enter state 37
	'Bit'          shift, and enter state 38
	'QBit'         shift, and enter state 39
	'T'            shift, and enter state 40
	L_Variable     shift, and enter state 41

	Variable       goto state 32
	Type2          goto state 43

State 13

	%start_pType1 -> . Type1                            (rule 13)

	'!'            shift, and enter state 36
	'('            shift, and enter state 37
	'Bit'          shift, and enter state 38
	'QBit'         shift, and enter state 39
	'T'            shift, and enter state 40
	L_Variable     shift, and enter state 41

	Variable       goto state 32
	Type2          goto state 33
	Type1          goto state 42

State 14

	%start_pType -> . Type                              (rule 14)

	'!'            shift, and enter state 36
	'('            shift, and enter state 37
	'Bit'          shift, and enter state 38
	'QBit'         shift, and enter state 39
	'T'            shift, and enter state 40
	L_Variable     shift, and enter state 41

	Variable       goto state 32
	Type2          goto state 33
	Type1          goto state 34
	Type           goto state 35

State 15

	%start_pGate -> . Gate                              (rule 15)

	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	L_GateIdent    shift, and enter state 31

	GateIdent      goto state 18
	Gate           goto state 19

State 16

	FunVar -> . L_FunVar                                (rule 16)

	L_FunVar       shift, and enter state 17


State 17

	FunVar -> L_FunVar .                                (rule 16)

	'!'            reduce using rule 16
	'('            reduce using rule 16
	'Bit'          reduce using rule 16
	'QBit'         reduce using rule 16
	'T'            reduce using rule 16
	L_Variable     reduce using rule 16


State 18

	Gate -> GateIdent .                                 (rule 65)

	'('            reduce using rule 65
	')'            reduce using rule 65
	'*'            reduce using rule 65
	','            reduce using rule 65
	'0'            reduce using rule 65
	'1'            reduce using rule 65
	'CNOT'         reduce using rule 65
	'FREDKIN'      reduce using rule 65
	'H'            reduce using rule 65
	'I'            reduce using rule 65
	'S'            reduce using rule 65
	'SWAP'         reduce using rule 65
	'T'            reduce using rule 65
	'TOFFOLI'      reduce using rule 65
	'X'            reduce using rule 65
	'Y'            reduce using rule 65
	'Z'            reduce using rule 65
	'else'         reduce using rule 65
	'in'           reduce using rule 65
	'then'         reduce using rule 65
	L_FunVar       reduce using rule 65
	L_Variable     reduce using rule 65
	L_GateIdent    reduce using rule 65
	%eof           reduce using rule 65


State 19

	%start_pGate -> Gate .                              (rule 15)

	%eof           accept


State 20

	Gate -> 'CNOT' .                                    (rule 61)

	'('            reduce using rule 61
	')'            reduce using rule 61
	'*'            reduce using rule 61
	','            reduce using rule 61
	'0'            reduce using rule 61
	'1'            reduce using rule 61
	'CNOT'         reduce using rule 61
	'FREDKIN'      reduce using rule 61
	'H'            reduce using rule 61
	'I'            reduce using rule 61
	'S'            reduce using rule 61
	'SWAP'         reduce using rule 61
	'T'            reduce using rule 61
	'TOFFOLI'      reduce using rule 61
	'X'            reduce using rule 61
	'Y'            reduce using rule 61
	'Z'            reduce using rule 61
	'else'         reduce using rule 61
	'in'           reduce using rule 61
	'then'         reduce using rule 61
	L_FunVar       reduce using rule 61
	L_Variable     reduce using rule 61
	L_GateIdent    reduce using rule 61
	%eof           reduce using rule 61


State 21

	Gate -> 'FREDKIN' .                                 (rule 64)

	'('            reduce using rule 64
	')'            reduce using rule 64
	'*'            reduce using rule 64
	','            reduce using rule 64
	'0'            reduce using rule 64
	'1'            reduce using rule 64
	'CNOT'         reduce using rule 64
	'FREDKIN'      reduce using rule 64
	'H'            reduce using rule 64
	'I'            reduce using rule 64
	'S'            reduce using rule 64
	'SWAP'         reduce using rule 64
	'T'            reduce using rule 64
	'TOFFOLI'      reduce using rule 64
	'X'            reduce using rule 64
	'Y'            reduce using rule 64
	'Z'            reduce using rule 64
	'else'         reduce using rule 64
	'in'           reduce using rule 64
	'then'         reduce using rule 64
	L_FunVar       reduce using rule 64
	L_Variable     reduce using rule 64
	L_GateIdent    reduce using rule 64
	%eof           reduce using rule 64


State 22

	Gate -> 'H' .                                       (rule 54)

	'('            reduce using rule 54
	')'            reduce using rule 54
	'*'            reduce using rule 54
	','            reduce using rule 54
	'0'            reduce using rule 54
	'1'            reduce using rule 54
	'CNOT'         reduce using rule 54
	'FREDKIN'      reduce using rule 54
	'H'            reduce using rule 54
	'I'            reduce using rule 54
	'S'            reduce using rule 54
	'SWAP'         reduce using rule 54
	'T'            reduce using rule 54
	'TOFFOLI'      reduce using rule 54
	'X'            reduce using rule 54
	'Y'            reduce using rule 54
	'Z'            reduce using rule 54
	'else'         reduce using rule 54
	'in'           reduce using rule 54
	'then'         reduce using rule 54
	L_FunVar       reduce using rule 54
	L_Variable     reduce using rule 54
	L_GateIdent    reduce using rule 54
	%eof           reduce using rule 54


State 23

	Gate -> 'I' .                                       (rule 58)

	'('            reduce using rule 58
	')'            reduce using rule 58
	'*'            reduce using rule 58
	','            reduce using rule 58
	'0'            reduce using rule 58
	'1'            reduce using rule 58
	'CNOT'         reduce using rule 58
	'FREDKIN'      reduce using rule 58
	'H'            reduce using rule 58
	'I'            reduce using rule 58
	'S'            reduce using rule 58
	'SWAP'         reduce using rule 58
	'T'            reduce using rule 58
	'TOFFOLI'      reduce using rule 58
	'X'            reduce using rule 58
	'Y'            reduce using rule 58
	'Z'            reduce using rule 58
	'else'         reduce using rule 58
	'in'           reduce using rule 58
	'then'         reduce using rule 58
	L_FunVar       reduce using rule 58
	L_Variable     reduce using rule 58
	L_GateIdent    reduce using rule 58
	%eof           reduce using rule 58


State 24

	Gate -> 'S' .                                       (rule 59)

	'('            reduce using rule 59
	')'            reduce using rule 59
	'*'            reduce using rule 59
	','            reduce using rule 59
	'0'            reduce using rule 59
	'1'            reduce using rule 59
	'CNOT'         reduce using rule 59
	'FREDKIN'      reduce using rule 59
	'H'            reduce using rule 59
	'I'            reduce using rule 59
	'S'            reduce using rule 59
	'SWAP'         reduce using rule 59
	'T'            reduce using rule 59
	'TOFFOLI'      reduce using rule 59
	'X'            reduce using rule 59
	'Y'            reduce using rule 59
	'Z'            reduce using rule 59
	'else'         reduce using rule 59
	'in'           reduce using rule 59
	'then'         reduce using rule 59
	L_FunVar       reduce using rule 59
	L_Variable     reduce using rule 59
	L_GateIdent    reduce using rule 59
	%eof           reduce using rule 59


State 25

	Gate -> 'SWAP' .                                    (rule 63)

	'('            reduce using rule 63
	')'            reduce using rule 63
	'*'            reduce using rule 63
	','            reduce using rule 63
	'0'            reduce using rule 63
	'1'            reduce using rule 63
	'CNOT'         reduce using rule 63
	'FREDKIN'      reduce using rule 63
	'H'            reduce using rule 63
	'I'            reduce using rule 63
	'S'            reduce using rule 63
	'SWAP'         reduce using rule 63
	'T'            reduce using rule 63
	'TOFFOLI'      reduce using rule 63
	'X'            reduce using rule 63
	'Y'            reduce using rule 63
	'Z'            reduce using rule 63
	'else'         reduce using rule 63
	'in'           reduce using rule 63
	'then'         reduce using rule 63
	L_FunVar       reduce using rule 63
	L_Variable     reduce using rule 63
	L_GateIdent    reduce using rule 63
	%eof           reduce using rule 63


State 26

	Gate -> 'T' .                                       (rule 60)

	'('            reduce using rule 60
	')'            reduce using rule 60
	'*'            reduce using rule 60
	','            reduce using rule 60
	'0'            reduce using rule 60
	'1'            reduce using rule 60
	'CNOT'         reduce using rule 60
	'FREDKIN'      reduce using rule 60
	'H'            reduce using rule 60
	'I'            reduce using rule 60
	'S'            reduce using rule 60
	'SWAP'         reduce using rule 60
	'T'            reduce using rule 60
	'TOFFOLI'      reduce using rule 60
	'X'            reduce using rule 60
	'Y'            reduce using rule 60
	'Z'            reduce using rule 60
	'else'         reduce using rule 60
	'in'           reduce using rule 60
	'then'         reduce using rule 60
	L_FunVar       reduce using rule 60
	L_Variable     reduce using rule 60
	L_GateIdent    reduce using rule 60
	%eof           reduce using rule 60


State 27

	Gate -> 'TOFFOLI' .                                 (rule 62)

	'('            reduce using rule 62
	')'            reduce using rule 62
	'*'            reduce using rule 62
	','            reduce using rule 62
	'0'            reduce using rule 62
	'1'            reduce using rule 62
	'CNOT'         reduce using rule 62
	'FREDKIN'      reduce using rule 62
	'H'            reduce using rule 62
	'I'            reduce using rule 62
	'S'            reduce using rule 62
	'SWAP'         reduce using rule 62
	'T'            reduce using rule 62
	'TOFFOLI'      reduce using rule 62
	'X'            reduce using rule 62
	'Y'            reduce using rule 62
	'Z'            reduce using rule 62
	'else'         reduce using rule 62
	'in'           reduce using rule 62
	'then'         reduce using rule 62
	L_FunVar       reduce using rule 62
	L_Variable     reduce using rule 62
	L_GateIdent    reduce using rule 62
	%eof           reduce using rule 62


State 28

	Gate -> 'X' .                                       (rule 55)

	'('            reduce using rule 55
	')'            reduce using rule 55
	'*'            reduce using rule 55
	','            reduce using rule 55
	'0'            reduce using rule 55
	'1'            reduce using rule 55
	'CNOT'         reduce using rule 55
	'FREDKIN'      reduce using rule 55
	'H'            reduce using rule 55
	'I'            reduce using rule 55
	'S'            reduce using rule 55
	'SWAP'         reduce using rule 55
	'T'            reduce using rule 55
	'TOFFOLI'      reduce using rule 55
	'X'            reduce using rule 55
	'Y'            reduce using rule 55
	'Z'            reduce using rule 55
	'else'         reduce using rule 55
	'in'           reduce using rule 55
	'then'         reduce using rule 55
	L_FunVar       reduce using rule 55
	L_Variable     reduce using rule 55
	L_GateIdent    reduce using rule 55
	%eof           reduce using rule 55


State 29

	Gate -> 'Y' .                                       (rule 56)

	'('            reduce using rule 56
	')'            reduce using rule 56
	'*'            reduce using rule 56
	','            reduce using rule 56
	'0'            reduce using rule 56
	'1'            reduce using rule 56
	'CNOT'         reduce using rule 56
	'FREDKIN'      reduce using rule 56
	'H'            reduce using rule 56
	'I'            reduce using rule 56
	'S'            reduce using rule 56
	'SWAP'         reduce using rule 56
	'T'            reduce using rule 56
	'TOFFOLI'      reduce using rule 56
	'X'            reduce using rule 56
	'Y'            reduce using rule 56
	'Z'            reduce using rule 56
	'else'         reduce using rule 56
	'in'           reduce using rule 56
	'then'         reduce using rule 56
	L_FunVar       reduce using rule 56
	L_Variable     reduce using rule 56
	L_GateIdent    reduce using rule 56
	%eof           reduce using rule 56


State 30

	Gate -> 'Z' .                                       (rule 57)

	'('            reduce using rule 57
	')'            reduce using rule 57
	'*'            reduce using rule 57
	','            reduce using rule 57
	'0'            reduce using rule 57
	'1'            reduce using rule 57
	'CNOT'         reduce using rule 57
	'FREDKIN'      reduce using rule 57
	'H'            reduce using rule 57
	'I'            reduce using rule 57
	'S'            reduce using rule 57
	'SWAP'         reduce using rule 57
	'T'            reduce using rule 57
	'TOFFOLI'      reduce using rule 57
	'X'            reduce using rule 57
	'Y'            reduce using rule 57
	'Z'            reduce using rule 57
	'else'         reduce using rule 57
	'in'           reduce using rule 57
	'then'         reduce using rule 57
	L_FunVar       reduce using rule 57
	L_Variable     reduce using rule 57
	L_GateIdent    reduce using rule 57
	%eof           reduce using rule 57


State 31

	GateIdent -> L_GateIdent .                          (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'*'            reduce using rule 18
	','            reduce using rule 18
	'0'            reduce using rule 18
	'1'            reduce using rule 18
	'CNOT'         reduce using rule 18
	'FREDKIN'      reduce using rule 18
	'H'            reduce using rule 18
	'I'            reduce using rule 18
	'S'            reduce using rule 18
	'SWAP'         reduce using rule 18
	'T'            reduce using rule 18
	'TOFFOLI'      reduce using rule 18
	'X'            reduce using rule 18
	'Y'            reduce using rule 18
	'Z'            reduce using rule 18
	'else'         reduce using rule 18
	'in'           reduce using rule 18
	'then'         reduce using rule 18
	L_FunVar       reduce using rule 18
	L_Variable     reduce using rule 18
	L_GateIdent    reduce using rule 18
	%eof           reduce using rule 18


State 32

	Type2 -> Variable .                                 (rule 44)

	')'            reduce using rule 44
	'-o'           reduce using rule 44
	'><'           reduce using rule 44
	L_Variable     reduce using rule 44
	%eof           reduce using rule 44


State 33

	Type1 -> Type2 . '><' Type1                         (rule 50)
	Type1 -> Type2 . '-o' Type1                         (rule 51)
	Type1 -> Type2 .                                    (rule 52)

	')'            reduce using rule 52
	'-o'           shift, and enter state 90
	'><'           shift, and enter state 91
	L_Variable     reduce using rule 52
	%eof           reduce using rule 52


State 34

	Type -> Type1 .                                     (rule 53)

	')'            reduce using rule 53
	L_Variable     reduce using rule 53
	%eof           reduce using rule 53


State 35

	%start_pType -> Type .                              (rule 14)

	%eof           accept


State 36

	Type2 -> '!' . Type2                                (rule 48)

	'!'            shift, and enter state 36
	'('            shift, and enter state 37
	'Bit'          shift, and enter state 38
	'QBit'         shift, and enter state 39
	'T'            shift, and enter state 40
	L_Variable     shift, and enter state 41

	Variable       goto state 32
	Type2          goto state 89

State 37

	Type2 -> '(' . Type ')'                             (rule 49)

	'!'            shift, and enter state 36
	'('            shift, and enter state 37
	'Bit'          shift, and enter state 38
	'QBit'         shift, and enter state 39
	'T'            shift, and enter state 40
	L_Variable     shift, and enter state 41

	Variable       goto state 32
	Type2          goto state 33
	Type1          goto state 34
	Type           goto state 88

State 38

	Type2 -> 'Bit' .                                    (rule 45)

	')'            reduce using rule 45
	'-o'           reduce using rule 45
	'><'           reduce using rule 45
	L_Variable     reduce using rule 45
	%eof           reduce using rule 45


State 39

	Type2 -> 'QBit' .                                   (rule 46)

	')'            reduce using rule 46
	'-o'           reduce using rule 46
	'><'           reduce using rule 46
	L_Variable     reduce using rule 46
	%eof           reduce using rule 46


State 40

	Type2 -> 'T' .                                      (rule 47)

	')'            reduce using rule 47
	'-o'           reduce using rule 47
	'><'           reduce using rule 47
	L_Variable     reduce using rule 47
	%eof           reduce using rule 47


State 41

	Variable -> L_Variable .                            (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'*'            reduce using rule 17
	','            reduce using rule 17
	'-o'           reduce using rule 17
	'.'            reduce using rule 17
	'0'            reduce using rule 17
	'1'            reduce using rule 17
	'='            reduce using rule 17
	'><'           reduce using rule 17
	'CNOT'         reduce using rule 17
	'FREDKIN'      reduce using rule 17
	'H'            reduce using rule 17
	'I'            reduce using rule 17
	'S'            reduce using rule 17
	'SWAP'         reduce using rule 17
	'T'            reduce using rule 17
	'TOFFOLI'      reduce using rule 17
	'X'            reduce using rule 17
	'Y'            reduce using rule 17
	'Z'            reduce using rule 17
	'else'         reduce using rule 17
	'in'           reduce using rule 17
	'then'         reduce using rule 17
	L_FunVar       reduce using rule 17
	L_Variable     reduce using rule 17
	L_GateIdent    reduce using rule 17
	%eof           reduce using rule 17


State 42

	%start_pType1 -> Type1 .                            (rule 13)

	%eof           accept


State 43

	%start_pType2 -> Type2 .                            (rule 12)

	%eof           accept


State 44

	Arg -> Variable .                                   (rule 41)

	'='            reduce using rule 41
	L_Variable     reduce using rule 41
	%eof           reduce using rule 41


State 45

	ListArg -> Arg . ListArg                            (rule 43)

	'='            reduce using rule 42
	L_Variable     shift, and enter state 41
	%eof           reduce using rule 42

	Variable       goto state 44
	Arg            goto state 45
	ListArg        goto state 87

State 46

	%start_pListArg -> ListArg .                        (rule 11)

	%eof           accept


State 47

	%start_pArg -> Arg .                                (rule 10)

	%eof           accept


State 48

	Function -> Variable . ListArg '=' Term             (rule 40)

	'='            reduce using rule 42
	L_Variable     shift, and enter state 41

	Variable       goto state 44
	Arg            goto state 45
	ListArg        goto state 86

State 49

	%start_pFunction -> Function .                      (rule 9)

	%eof           accept


State 50

	FunDec -> FunVar . Type Function                    (rule 37)

	'!'            shift, and enter state 36
	'('            shift, and enter state 37
	'Bit'          shift, and enter state 38
	'QBit'         shift, and enter state 39
	'T'            shift, and enter state 40
	L_Variable     shift, and enter state 41

	Variable       goto state 32
	Type2          goto state 33
	Type1          goto state 34
	Type           goto state 85

State 51

	ListFunDec -> FunDec . ListFunDec                   (rule 39)

	L_FunVar       shift, and enter state 17
	%eof           reduce using rule 38

	FunVar         goto state 50
	FunDec         goto state 51
	ListFunDec     goto state 84

State 52

	%start_pListFunDec -> ListFunDec .                  (rule 8)

	%eof           accept


State 53

	%start_pFunDec -> FunDec .                          (rule 7)

	%eof           accept


State 54

	%start_pBit -> Bit .                                (rule 6)

	%eof           accept


State 55

	Bit -> '0' .                                        (rule 35)

	'('            reduce using rule 35
	')'            reduce using rule 35
	'*'            reduce using rule 35
	','            reduce using rule 35
	'0'            reduce using rule 35
	'1'            reduce using rule 35
	'CNOT'         reduce using rule 35
	'FREDKIN'      reduce using rule 35
	'H'            reduce using rule 35
	'I'            reduce using rule 35
	'S'            reduce using rule 35
	'SWAP'         reduce using rule 35
	'T'            reduce using rule 35
	'TOFFOLI'      reduce using rule 35
	'X'            reduce using rule 35
	'Y'            reduce using rule 35
	'Z'            reduce using rule 35
	'else'         reduce using rule 35
	'in'           reduce using rule 35
	'then'         reduce using rule 35
	L_FunVar       reduce using rule 35
	L_Variable     reduce using rule 35
	L_GateIdent    reduce using rule 35
	%eof           reduce using rule 35


State 56

	Bit -> '1' .                                        (rule 36)

	'('            reduce using rule 36
	')'            reduce using rule 36
	'*'            reduce using rule 36
	','            reduce using rule 36
	'0'            reduce using rule 36
	'1'            reduce using rule 36
	'CNOT'         reduce using rule 36
	'FREDKIN'      reduce using rule 36
	'H'            reduce using rule 36
	'I'            reduce using rule 36
	'S'            reduce using rule 36
	'SWAP'         reduce using rule 36
	'T'            reduce using rule 36
	'TOFFOLI'      reduce using rule 36
	'X'            reduce using rule 36
	'Y'            reduce using rule 36
	'Z'            reduce using rule 36
	'else'         reduce using rule 36
	'in'           reduce using rule 36
	'then'         reduce using rule 36
	L_FunVar       reduce using rule 36
	L_Variable     reduce using rule 36
	L_GateIdent    reduce using rule 36
	%eof           reduce using rule 36


State 57

	%start_pTup -> Tup .                                (rule 5)

	%eof           accept


State 58

	Tup -> '(' . Term ',' Term ')'                      (rule 34)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 83
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 59

	Term3 -> Variable .                                 (rule 21)

	'('            reduce using rule 21
	')'            reduce using rule 21
	'*'            reduce using rule 21
	','            reduce using rule 21
	'0'            reduce using rule 21
	'1'            reduce using rule 21
	'CNOT'         reduce using rule 21
	'FREDKIN'      reduce using rule 21
	'H'            reduce using rule 21
	'I'            reduce using rule 21
	'S'            reduce using rule 21
	'SWAP'         reduce using rule 21
	'T'            reduce using rule 21
	'TOFFOLI'      reduce using rule 21
	'X'            reduce using rule 21
	'Y'            reduce using rule 21
	'Z'            reduce using rule 21
	'else'         reduce using rule 21
	'in'           reduce using rule 21
	'then'         reduce using rule 21
	L_FunVar       reduce using rule 21
	L_Variable     reduce using rule 21
	L_GateIdent    reduce using rule 21
	%eof           reduce using rule 21


State 60

	Term1 -> Lambda . Variable '.' Term                 (rule 31)

	L_Variable     shift, and enter state 41

	Variable       goto state 82

State 61

	Term2 -> Term3 .                                    (rule 28)

	'('            reduce using rule 28
	')'            reduce using rule 28
	'*'            reduce using rule 28
	','            reduce using rule 28
	'0'            reduce using rule 28
	'1'            reduce using rule 28
	'CNOT'         reduce using rule 28
	'FREDKIN'      reduce using rule 28
	'H'            reduce using rule 28
	'I'            reduce using rule 28
	'S'            reduce using rule 28
	'SWAP'         reduce using rule 28
	'T'            reduce using rule 28
	'TOFFOLI'      reduce using rule 28
	'X'            reduce using rule 28
	'Y'            reduce using rule 28
	'Z'            reduce using rule 28
	'else'         reduce using rule 28
	'in'           reduce using rule 28
	'then'         reduce using rule 28
	L_FunVar       reduce using rule 28
	L_Variable     reduce using rule 28
	L_GateIdent    reduce using rule 28
	%eof           reduce using rule 28


State 62

	Term2 -> Term2 . Term3                              (rule 27)
	Term1 -> Term2 .                                    (rule 32)

	'('            shift, and enter state 68
	')'            reduce using rule 32
	'*'            shift, and enter state 69
	','            reduce using rule 32
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	L_FunVar       reduce using rule 32
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	%eof           reduce using rule 32

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 78
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 63

	Term -> Term1 .                                     (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33
	L_FunVar       reduce using rule 33
	%eof           reduce using rule 33


State 64

	%start_pTerm -> Term .                              (rule 4)

	%eof           accept


State 65

	Term3 -> Tup .                                      (rule 24)

	'('            reduce using rule 24
	')'            reduce using rule 24
	'*'            reduce using rule 24
	','            reduce using rule 24
	'0'            reduce using rule 24
	'1'            reduce using rule 24
	'CNOT'         reduce using rule 24
	'FREDKIN'      reduce using rule 24
	'H'            reduce using rule 24
	'I'            reduce using rule 24
	'S'            reduce using rule 24
	'SWAP'         reduce using rule 24
	'T'            reduce using rule 24
	'TOFFOLI'      reduce using rule 24
	'X'            reduce using rule 24
	'Y'            reduce using rule 24
	'Z'            reduce using rule 24
	'else'         reduce using rule 24
	'in'           reduce using rule 24
	'then'         reduce using rule 24
	L_FunVar       reduce using rule 24
	L_Variable     reduce using rule 24
	L_GateIdent    reduce using rule 24
	%eof           reduce using rule 24


State 66

	Term3 -> Bit .                                      (rule 22)

	'('            reduce using rule 22
	')'            reduce using rule 22
	'*'            reduce using rule 22
	','            reduce using rule 22
	'0'            reduce using rule 22
	'1'            reduce using rule 22
	'CNOT'         reduce using rule 22
	'FREDKIN'      reduce using rule 22
	'H'            reduce using rule 22
	'I'            reduce using rule 22
	'S'            reduce using rule 22
	'SWAP'         reduce using rule 22
	'T'            reduce using rule 22
	'TOFFOLI'      reduce using rule 22
	'X'            reduce using rule 22
	'Y'            reduce using rule 22
	'Z'            reduce using rule 22
	'else'         reduce using rule 22
	'in'           reduce using rule 22
	'then'         reduce using rule 22
	L_FunVar       reduce using rule 22
	L_Variable     reduce using rule 22
	L_GateIdent    reduce using rule 22
	%eof           reduce using rule 22


State 67

	Term3 -> Gate .                                     (rule 23)

	'('            reduce using rule 23
	')'            reduce using rule 23
	'*'            reduce using rule 23
	','            reduce using rule 23
	'0'            reduce using rule 23
	'1'            reduce using rule 23
	'CNOT'         reduce using rule 23
	'FREDKIN'      reduce using rule 23
	'H'            reduce using rule 23
	'I'            reduce using rule 23
	'S'            reduce using rule 23
	'SWAP'         reduce using rule 23
	'T'            reduce using rule 23
	'TOFFOLI'      reduce using rule 23
	'X'            reduce using rule 23
	'Y'            reduce using rule 23
	'Z'            reduce using rule 23
	'else'         reduce using rule 23
	'in'           reduce using rule 23
	'then'         reduce using rule 23
	L_FunVar       reduce using rule 23
	L_Variable     reduce using rule 23
	L_GateIdent    reduce using rule 23
	%eof           reduce using rule 23


State 68

	Term3 -> '(' . Term ')'                             (rule 26)
	Tup -> '(' . Term ',' Term ')'                      (rule 34)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 81
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 69

	Term3 -> '*' .                                      (rule 25)

	'('            reduce using rule 25
	')'            reduce using rule 25
	'*'            reduce using rule 25
	','            reduce using rule 25
	'0'            reduce using rule 25
	'1'            reduce using rule 25
	'CNOT'         reduce using rule 25
	'FREDKIN'      reduce using rule 25
	'H'            reduce using rule 25
	'I'            reduce using rule 25
	'S'            reduce using rule 25
	'SWAP'         reduce using rule 25
	'T'            reduce using rule 25
	'TOFFOLI'      reduce using rule 25
	'X'            reduce using rule 25
	'Y'            reduce using rule 25
	'Z'            reduce using rule 25
	'else'         reduce using rule 25
	'in'           reduce using rule 25
	'then'         reduce using rule 25
	L_FunVar       reduce using rule 25
	L_Variable     reduce using rule 25
	L_GateIdent    reduce using rule 25
	%eof           reduce using rule 25


State 70

	Term1 -> 'if' . Term2 'then' Term2 'else' Term      (rule 29)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 61
	Term2          goto state 80
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 71

	Term1 -> 'let' . Tup '=' Term2 'in' Term            (rule 30)

	'('            shift, and enter state 58

	Tup            goto state 79

State 72

	Lambda -> L_Lambda .                                (rule 19)

	L_Variable     reduce using rule 19


State 73

	%start_pTerm1 -> Term1 .                            (rule 3)

	%eof           accept


State 74

	%start_pTerm2 -> Term2 .                            (rule 2)
	Term2 -> Term2 . Term3                              (rule 27)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	%eof           accept

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 78
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 75

	%start_pTerm3 -> Term3 .                            (rule 1)

	%eof           accept


State 76

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 77

	Program -> ListFunDec .                             (rule 20)

	%eof           reduce using rule 20


State 78

	Term2 -> Term2 Term3 .                              (rule 27)

	'('            reduce using rule 27
	')'            reduce using rule 27
	'*'            reduce using rule 27
	','            reduce using rule 27
	'0'            reduce using rule 27
	'1'            reduce using rule 27
	'CNOT'         reduce using rule 27
	'FREDKIN'      reduce using rule 27
	'H'            reduce using rule 27
	'I'            reduce using rule 27
	'S'            reduce using rule 27
	'SWAP'         reduce using rule 27
	'T'            reduce using rule 27
	'TOFFOLI'      reduce using rule 27
	'X'            reduce using rule 27
	'Y'            reduce using rule 27
	'Z'            reduce using rule 27
	'else'         reduce using rule 27
	'in'           reduce using rule 27
	'then'         reduce using rule 27
	L_FunVar       reduce using rule 27
	L_Variable     reduce using rule 27
	L_GateIdent    reduce using rule 27
	%eof           reduce using rule 27


State 79

	Term1 -> 'let' Tup . '=' Term2 'in' Term            (rule 30)

	'='            shift, and enter state 101


State 80

	Term2 -> Term2 . Term3                              (rule 27)
	Term1 -> 'if' Term2 . 'then' Term2 'else' Term      (rule 29)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'then'         shift, and enter state 100
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 78
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 81

	Term3 -> '(' Term . ')'                             (rule 26)
	Tup -> '(' Term . ',' Term ')'                      (rule 34)

	')'            shift, and enter state 99
	','            shift, and enter state 97


State 82

	Term1 -> Lambda Variable . '.' Term                 (rule 31)

	'.'            shift, and enter state 98


State 83

	Tup -> '(' Term . ',' Term ')'                      (rule 34)

	','            shift, and enter state 97


State 84

	ListFunDec -> FunDec ListFunDec .                   (rule 39)

	%eof           reduce using rule 39


State 85

	FunDec -> FunVar Type . Function                    (rule 37)

	L_Variable     shift, and enter state 41

	Variable       goto state 48
	Function       goto state 96

State 86

	Function -> Variable ListArg . '=' Term             (rule 40)

	'='            shift, and enter state 95


State 87

	ListArg -> Arg ListArg .                            (rule 43)

	'='            reduce using rule 43
	%eof           reduce using rule 43


State 88

	Type2 -> '(' Type . ')'                             (rule 49)

	')'            shift, and enter state 94


State 89

	Type2 -> '!' Type2 .                                (rule 48)

	')'            reduce using rule 48
	'-o'           reduce using rule 48
	'><'           reduce using rule 48
	L_Variable     reduce using rule 48
	%eof           reduce using rule 48


State 90

	Type1 -> Type2 '-o' . Type1                         (rule 51)

	'!'            shift, and enter state 36
	'('            shift, and enter state 37
	'Bit'          shift, and enter state 38
	'QBit'         shift, and enter state 39
	'T'            shift, and enter state 40
	L_Variable     shift, and enter state 41

	Variable       goto state 32
	Type2          goto state 33
	Type1          goto state 93

State 91

	Type1 -> Type2 '><' . Type1                         (rule 50)

	'!'            shift, and enter state 36
	'('            shift, and enter state 37
	'Bit'          shift, and enter state 38
	'QBit'         shift, and enter state 39
	'T'            shift, and enter state 40
	L_Variable     shift, and enter state 41

	Variable       goto state 32
	Type2          goto state 33
	Type1          goto state 92

State 92

	Type1 -> Type2 '><' Type1 .                         (rule 50)

	')'            reduce using rule 50
	L_Variable     reduce using rule 50
	%eof           reduce using rule 50


State 93

	Type1 -> Type2 '-o' Type1 .                         (rule 51)

	')'            reduce using rule 51
	L_Variable     reduce using rule 51
	%eof           reduce using rule 51


State 94

	Type2 -> '(' Type ')' .                             (rule 49)

	')'            reduce using rule 49
	'-o'           reduce using rule 49
	'><'           reduce using rule 49
	L_Variable     reduce using rule 49
	%eof           reduce using rule 49


State 95

	Function -> Variable ListArg '=' . Term             (rule 40)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 106
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 96

	FunDec -> FunVar Type Function .                    (rule 37)

	L_FunVar       reduce using rule 37
	%eof           reduce using rule 37


State 97

	Tup -> '(' Term ',' . Term ')'                      (rule 34)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 105
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 98

	Term1 -> Lambda Variable '.' . Term                 (rule 31)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 104
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 99

	Term3 -> '(' Term ')' .                             (rule 26)

	'('            reduce using rule 26
	')'            reduce using rule 26
	'*'            reduce using rule 26
	','            reduce using rule 26
	'0'            reduce using rule 26
	'1'            reduce using rule 26
	'CNOT'         reduce using rule 26
	'FREDKIN'      reduce using rule 26
	'H'            reduce using rule 26
	'I'            reduce using rule 26
	'S'            reduce using rule 26
	'SWAP'         reduce using rule 26
	'T'            reduce using rule 26
	'TOFFOLI'      reduce using rule 26
	'X'            reduce using rule 26
	'Y'            reduce using rule 26
	'Z'            reduce using rule 26
	'else'         reduce using rule 26
	'in'           reduce using rule 26
	'then'         reduce using rule 26
	L_FunVar       reduce using rule 26
	L_Variable     reduce using rule 26
	L_GateIdent    reduce using rule 26
	%eof           reduce using rule 26


State 100

	Term1 -> 'if' Term2 'then' . Term2 'else' Term      (rule 29)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 61
	Term2          goto state 103
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 101

	Term1 -> 'let' Tup '=' . Term2 'in' Term            (rule 30)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 61
	Term2          goto state 102
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 102

	Term2 -> Term2 . Term3                              (rule 27)
	Term1 -> 'let' Tup '=' Term2 . 'in' Term            (rule 30)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'in'           shift, and enter state 109
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 78
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 103

	Term2 -> Term2 . Term3                              (rule 27)
	Term1 -> 'if' Term2 'then' Term2 . 'else' Term      (rule 29)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'else'         shift, and enter state 108
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31

	Variable       goto state 59
	GateIdent      goto state 18
	Term3          goto state 78
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 104

	Term1 -> Lambda Variable '.' Term .                 (rule 31)

	')'            reduce using rule 31
	','            reduce using rule 31
	L_FunVar       reduce using rule 31
	%eof           reduce using rule 31


State 105

	Tup -> '(' Term ',' Term . ')'                      (rule 34)

	')'            shift, and enter state 107


State 106

	Function -> Variable ListArg '=' Term .             (rule 40)

	L_FunVar       reduce using rule 40
	%eof           reduce using rule 40


State 107

	Tup -> '(' Term ',' Term ')' .                      (rule 34)

	'('            reduce using rule 34
	')'            reduce using rule 34
	'*'            reduce using rule 34
	','            reduce using rule 34
	'0'            reduce using rule 34
	'1'            reduce using rule 34
	'='            reduce using rule 34
	'CNOT'         reduce using rule 34
	'FREDKIN'      reduce using rule 34
	'H'            reduce using rule 34
	'I'            reduce using rule 34
	'S'            reduce using rule 34
	'SWAP'         reduce using rule 34
	'T'            reduce using rule 34
	'TOFFOLI'      reduce using rule 34
	'X'            reduce using rule 34
	'Y'            reduce using rule 34
	'Z'            reduce using rule 34
	'else'         reduce using rule 34
	'in'           reduce using rule 34
	'then'         reduce using rule 34
	L_FunVar       reduce using rule 34
	L_Variable     reduce using rule 34
	L_GateIdent    reduce using rule 34
	%eof           reduce using rule 34


State 108

	Term1 -> 'if' Term2 'then' Term2 'else' . Term      (rule 29)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 111
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 109

	Term1 -> 'let' Tup '=' Term2 'in' . Term            (rule 30)

	'('            shift, and enter state 68
	'*'            shift, and enter state 69
	'0'            shift, and enter state 55
	'1'            shift, and enter state 56
	'CNOT'         shift, and enter state 20
	'FREDKIN'      shift, and enter state 21
	'H'            shift, and enter state 22
	'I'            shift, and enter state 23
	'S'            shift, and enter state 24
	'SWAP'         shift, and enter state 25
	'T'            shift, and enter state 26
	'TOFFOLI'      shift, and enter state 27
	'X'            shift, and enter state 28
	'Y'            shift, and enter state 29
	'Z'            shift, and enter state 30
	'if'           shift, and enter state 70
	'let'          shift, and enter state 71
	L_Variable     shift, and enter state 41
	L_GateIdent    shift, and enter state 31
	L_Lambda       shift, and enter state 72

	Variable       goto state 59
	GateIdent      goto state 18
	Lambda         goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 110
	Tup            goto state 65
	Bit            goto state 66
	Gate           goto state 67

State 110

	Term1 -> 'let' Tup '=' Term2 'in' Term .            (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30
	L_FunVar       reduce using rule 30
	%eof           reduce using rule 30


State 111

	Term1 -> 'if' Term2 'then' Term2 'else' Term .      (rule 29)

	')'            reduce using rule 29
	','            reduce using rule 29
	L_FunVar       reduce using rule 29
	%eof           reduce using rule 29


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 66
Number of terminals: 33
Number of non-terminals: 36
Number of states: 112
